<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>【认证与授权】Spring Security自定义页面</title>
      <link href="/2020/05/07/spring/security/security-cap06/"/>
      <url>/2020/05/07/spring/security/security-cap06/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在前面的篇幅中，我们对认证和授权流程大致梳理了一遍。在这个过程中我们一直都是使用系统生成的默认页面，登录成功后也是直接调转到根路径页面。而在实际的开发过程中，我们是需要自定义登录页面的，有时还会添加各类验证机制，在登录成功后会跳转至指定页面，还会进行各种美化，甚至是前后端分离的方式。这时，就需要我们对自定义登录进行实现。</p></blockquote><p><em>本章节使用spring-security-custom-login</em></p><a id="more"></a><h2 id="一、工程准备"><a href="#一、工程准备" class="headerlink" title="一、工程准备"></a>一、工程准备</h2><h3 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>security-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wujiwen.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">description</span>&gt;</span>自定义登录页面<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-custom-login<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><p>我们引入了<code>thymeleaf</code>,也是官方推荐的做法。</p><h3 id="2、application-yml"><a href="#2、application-yml" class="headerlink" title="2、application.yml"></a>2、application.yml</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">server:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">8080</span></span><br><span class="line"></span><br><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="string">ADMIN</span></span><br></pre></td></tr></table></figure><p>非常的熟悉，端口、基础用户等信息</p><h3 id="3、启动类Application"><a href="#3、启动类Application" class="headerlink" title="3、启动类Application"></a>3、启动类Application</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityLoginApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SecurityLoginApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二、自定义SecurityConfig"><a href="#二、自定义SecurityConfig" class="headerlink" title="二、自定义SecurityConfig"></a>二、自定义SecurityConfig</h2><p>自定义<code>SecurityConfig</code>需继承<code>WebSecurityConfigurerAdapter</code>并重写相关配置即可，由于今天只涉及到自定义页面的信息，所以我们只需要重写<code>configure(HttpSecurity http)</code> 方法即可。在重写这个方法前，我们先来看一下原来这个方法是干什么的。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">http</span><br><span class="line">           <span class="comment">// 1 声明ExpressionUrlAuthorizationConfigurer，要求所有URL必须登录认证后才能访问</span></span><br><span class="line">.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line">           <span class="comment">// 2 声明一个默认的FormLoginConfigurer</span></span><br><span class="line">.formLogin()</span><br><span class="line">           .and()</span><br><span class="line">           <span class="comment">// 3 声明一个默认的HttpBasicConfigurer</span></span><br><span class="line">.httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li>对任何请求要求用户已认证(通俗地讲，用户必须先登录才能访问任何资源);</li><li>启用用户名密码表单登录认证机制;</li><li>启用<code>Http Basic</code>认证机制;</li></ol><p>下面我们就通过重写上述的方法来做到自定义登录页面等信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityConfig</span> <span class="keyword">extends</span> <span class="title">WebSecurityConfigurerAdapter</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        http.csrf().disable();</span><br><span class="line">        http.authorizeRequests().anyRequest().authenticated()</span><br><span class="line">                .and().httpBasic().and()</span><br><span class="line">            <span class="comment">// 1</span></span><br><span class="line">                .formLogin().loginPage(<span class="string">"/login"</span>)</span><br><span class="line">                <span class="comment">// 2</span></span><br><span class="line">            .loginProcessingUrl(<span class="string">"/loginAction"</span>)</span><br><span class="line">            <span class="comment">// 3</span></span><br><span class="line">                .defaultSuccessUrl(<span class="string">"/index"</span>)</span><br><span class="line">                .permitAll();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现其实和缺省方法中并没有太大的差别，只有三处的变化</p><ul><li><code>loginPage()</code>中将指定自定义登录页面的请求路径</li><li><code>loginProcessingUrl()</code> 为认证的请求接口，也就是我们常说的<code>form</code>表单中的<code>action</code>。如果不指定，将采用<code>loginPage</code>中的值。</li><li><code>defaultSuccessUrl()</code>为认证成功后跳转的页面地址</li></ul><h2 id="三、自定义页面"><a href="#三、自定义页面" class="headerlink" title="三、自定义页面"></a>三、自定义页面</h2><p>在springboot中使用html页面这里就不过多赘述，一般情况下在resource下新建templates文件下，将需要的页面放到该文件下即可。我的路径为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">_resource</span><br><span class="line">  |_templates</span><br><span class="line">|_login.html</span><br><span class="line">|_index.html</span><br></pre></td></tr></table></figure><h3 id="1、login-thml"><a href="#1、login-thml" class="headerlink" title="1、login.thml"></a>1、login.thml</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example <span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.error&#125;"</span>&gt;</span></span><br><span class="line">    用户名或密码错误</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">th:if</span>=<span class="string">"$&#123;param.logout&#125;"</span>&gt;</span></span><br><span class="line">    你已经退出</span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/loginAction&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 账号 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> 密码 : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这里我将action与loginProcessingUrl()对应，你也可以自己尝试更换或使用默认或与loginPage()一致的。</p><p>到这里我们就完成了一个最简单的表单提交的页面了。当我们点击submit按钮时，正确的请求路径将是</p><p><code>curl -x POST -d &quot;username=admin&amp;password=admin&quot; http://127.0.0.1:8080/loginAction</code></p><p>这里可能会有个疑问了，为啥你的参数就是username和password呢？嗯～ 当然可以自己指定的啊，因为在FormLoginConfigurer中默认的指定参数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="title">FormLoginConfigurer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">super</span>(<span class="keyword">new</span> UsernamePasswordAuthenticationFilter(), <span class="keyword">null</span>);</span><br><span class="line">usernameParameter(<span class="string">"username"</span>);</span><br><span class="line">passwordParameter(<span class="string">"password"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="2、index-html"><a href="#2、index-html" class="headerlink" title="2、index.html"></a>2、index.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Spring Security Example<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">h2</span>&gt;</span>Welcome <span class="tag">&lt;<span class="name">b</span> <span class="attr">th:text</span>=<span class="string">"$&#123;username&#125;"</span>&gt;</span><span class="tag">&lt;/<span class="name">b</span>&gt;</span><span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>这是个认证成功后的欢迎页面，比较简单，显示当前登录用户即可</p><h2 id="四、BaseContoller"><a href="#四、BaseContoller" class="headerlink" title="四、BaseContoller"></a>四、BaseContoller</h2><p>上面我们定义了各类路径和请求地址，接下来我们需要定义如果将这些页面映射出来</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BaseController</span> </span>&#123;</span><br><span class="line">    <span class="comment">// loginPage("/login") 将跳转到login.html</span></span><br><span class="line">    <span class="meta">@GetMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// index.html</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/index"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">(Model model, HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">        model.addAttribute(<span class="string">"username"</span>,request.getUserPrincipal().getName());</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"index"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="五、测试"><a href="#五、测试" class="headerlink" title="五、测试"></a>五、测试</h2><p><img src="https://i.loli.net/2020/05/08/9ponZ2zawsOfiAt.gif" alt=""></p><p>到这里我们已经完成了一个简单的自定义登录页面的改造了。当然，在实际的项目中需要自定义的东西还有很多很多，比如，当认证不通过时如果操作，当用户退出登录时如果操作，这些都没有去实现。</p><p>还有人会说，这都什么年代了，前后端分离啊，这些都可以通过一步步的改造来实现的。</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【认证与授权】Spring Security的授权流程</title>
      <link href="/2020/04/16/spring/security/security-cap05/"/>
      <url>/2020/04/16/spring/security/security-cap05/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上一篇我们简单的分析了一下认证流程，通过程序的启动加载了各类的配置信息。接下来我们一起来看一下授权流程，争取完成和前面简单的web基于sessin的认证方式一致。由于在授权过程中，我们预先会给用于设置角色，关于如果加载配置的角色信息这里就不做介绍了，上一篇的加载过程中我们可以发现相关的信息。</p><p><em>本篇依旧基于spring-security-basic</em></p></blockquote><a id="more"></a><h4 id="配置角色信息"><a href="#配置角色信息" class="headerlink" title="配置角色信息"></a>配置角色信息</h4><p>配置用户及其角色信息的方式很多，我们这次依旧采取配置文件的方式，不用代码或其他的配置方式，在之前的配置用户信息的地方application.yml，添加用户的角色信息。</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">roles:</span> <span class="string">ADMIN,USER</span></span><br></pre></td></tr></table></figure><p>这样我们就完成了最简单的用户角色赋予。在加载用户信息时我们知道会生成一个User对象，将其用户名、密码、权限信息封装进去。</p><p>这里需要注意一下关于role信息的加载</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserBuilder <span class="title">roles</span><span class="params">(String... roles)</span> </span>&#123;</span><br><span class="line">    List&lt;GrantedAuthority&gt; authorities = <span class="keyword">new</span> ArrayList&lt;&gt;(</span><br><span class="line">        roles.length);</span><br><span class="line">    <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">        Assert.isTrue(!role.startsWith(<span class="string">"ROLE_"</span>), () -&gt; role</span><br><span class="line">                      + <span class="string">" cannot start with ROLE_ (it is automatically added)"</span>);</span><br><span class="line">        authorities.add(<span class="keyword">new</span> SimpleGrantedAuthority(<span class="string">"ROLE_"</span> + role));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> authorities(authorities);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>也就是说我们上方配置的<code>ADMIN,USER会被转化成ROLE_ADMIN,ROLE_USER</code></p><h4 id="1、获取用户信息"><a href="#1、获取用户信息" class="headerlink" title="1、获取用户信息"></a>1、获取用户信息</h4><p>我们在<code>BasicController</code>类中添加一个获取认证用户信息的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">api</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 方式一</span></span><br><span class="line">    Principal userPrincipal = request.getUserPrincipal();</span><br><span class="line">    UsernamePasswordAuthenticationToken user = ((UsernamePasswordAuthenticationToken) userPrincipal);</span><br><span class="line">    System.out.println(user.toString());</span><br><span class="line"><span class="comment">// 方式二</span></span><br><span class="line">    SecurityContext securityContext = SecurityContextHolder.getContext();</span><br><span class="line">    System.out.println(securityContext.getAuthentication());</span><br><span class="line"><span class="comment">// 方式三</span></span><br><span class="line">    Object context = request.getSession().getAttribute(<span class="string">"SPRING_SECURITY_CONTEXT"</span>);</span><br><span class="line">    SecurityContext securityContext1 = (SecurityContext) context;</span><br><span class="line">    System.out.println(securityContext1.getAuthentication());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> user.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们从session中去获取用户的信息，然后拿到其授权信息就可以做相应的判断了<code>request.getSession().getAttribute(&quot;SPRING_SECURITY_CONTEXT&quot;);</code>这一段代码我们找到是在<code>HttpSessionSecurityContextRepository.saveContext(SecurityContext context)</code>中放入的，<code>SPRING_SECURITY_CONTEXT</code>是其维护的常量，这样我们就有可以根据这个key去获取当前的会话信息了。</p><p>当然我们还有另外的获取用户信息的方式还记得我们在<code>AbstractAuthenticationProcessingFilter</code>这个核心过滤器中的<code>successfulAuthentication</code>方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request,</span></span></span><br><span class="line"><span class="function"><span class="params">                                        HttpServletResponse response, FilterChain chain, Authentication authResult)</span></span></span><br><span class="line"><span class="function">    <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">        logger.debug(<span class="string">"Authentication success. Updating SecurityContextHolder to contain: "</span></span><br><span class="line">                     + authResult);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line"></span><br><span class="line">    rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Fire event</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">        eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(</span><br><span class="line">            authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里将其认证成功的结果信息放入到上下文中    <code>SecurityContextHolder.getContext().setAuthentication(authResult);</code>那我们也是可以直接通过其<code>get</code>方法获取<code>SecurityContextHolder.getContext();</code></p><p>登陆后直接访问接口<code>localhost:8080/getUser</code></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">org.springframework.security.authentication.UsernamePasswordAuthenticationToken@bade0105</span>: <span class="string">Principal: org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMIN; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffbcba8: RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: E4C77C8791C314B7B14F796B0DD38F13; Granted Authorities: ROLE_ADMIN</span></span><br><span class="line"><span class="meta">org.springframework.security.authentication.UsernamePasswordAuthenticationToken@bade0105</span>: <span class="string">Principal: org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMIN; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffbcba8: RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: E4C77C8791C314B7B14F796B0DD38F13; Granted Authorities: ROLE_ADMIN</span></span><br><span class="line"><span class="meta">org.springframework.security.authentication.UsernamePasswordAuthenticationToken@bade0105</span>: <span class="string">Principal: org.springframework.security.core.userdetails.User@586034f: Username: admin; Password: [PROTECTED]; Enabled: true; AccountNonExpired: true; credentialsNonExpired: true; AccountNonLocked: true; Granted Authorities: ROLE_ADMIN; Credentials: [PROTECTED]; Authenticated: true; Details: org.springframework.security.web.authentication.WebAuthenticationDetails@fffbcba8: RemoteIpAddress: 0:0:0:0:0:0:0:1; SessionId: E4C77C8791C314B7B14F796B0DD38F13; Granted Authorities: ROLE_ADMIN</span></span><br></pre></td></tr></table></figure><p>可以看到，控制台打印的三段信息是完全一样的。说明这里通过三种方式获取的用户信息是一致的。既然可以获取到当前登录的用户信息，接下来我们就可以通过用户信息的判断来决定其是否可以访问那些接口。</p><h4 id="2、自定义拦截器"><a href="#2、自定义拦截器" class="headerlink" title="2、自定义拦截器"></a>2、自定义拦截器</h4><p>上一步我们通过三种方式获取到了认证用户的信息，这里我们将设计一个拦截器来控制用户的访问权限。我们先设计两个接口，一个只能admin角色用户才可以访问，一个只能user角色用户才可以访问</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/admin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">adminApi</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Principal principal = request.getUserPrincipal();</span><br><span class="line">    String name = principal.getName();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"管理员："</span> + name + <span class="string">"你好，你可以访问/api/admin"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">userApi</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">    Principal principal = request.getUserPrincipal();</span><br><span class="line">    String name = principal.getName();</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"普通用户："</span> + name + <span class="string">"你好，你可以访问/api/user"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们设计了两个接口，通过url来区别不同角色访问的结果，我们再设计一个拦截器，这里我们可以直接参考前面的文章 <a href="https://www.wujiwen.cn/2020/04/05/spring/security/security-cap02/">基于session的认证方式</a> 中定义的拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_SESSION_KEY = <span class="string">"SPRING_SECURITY_CONTEXT"</span>;</span><br><span class="line">    <span class="comment">// 前置拦截，在接口访问前处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object attribute = request.getSession().getAttribute(USER_SESSION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (attribute == <span class="keyword">null</span>) &#123;</span><br><span class="line">            writeContent(response,<span class="string">"匿名用户不可访问"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            SecurityContext context = (SecurityContext) attribute;</span><br><span class="line">            Collection&lt;? extends GrantedAuthority&gt; authorities = context.getAuthentication().getAuthorities();</span><br><span class="line">            <span class="keyword">for</span> (GrantedAuthority authority : authorities) &#123;</span><br><span class="line">                <span class="keyword">if</span> (authority.getAuthority().equals(<span class="string">"ROLE_ADMIN"</span>) &amp;&amp; request.getRequestURI().contains(<span class="string">"admin"</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (authority.getAuthority().equals(<span class="string">"ROLE_USER"</span>) &amp;&amp; request.getRequestURI().contains(<span class="string">"user"</span>))&#123;</span><br><span class="line">                    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            writeContent(response,<span class="string">"权限不足"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应输出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeContent</span><span class="params">(HttpServletResponse response, String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setCharacterEncoding(<span class="string">"UTF-8"</span>);</span><br><span class="line">        response.setContentType(<span class="string">"application/json;charset=utf‐8"</span>);</span><br><span class="line">        PrintWriter writer = response.getWriter();</span><br><span class="line">        writer.write(msg);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时生效该拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加自定义拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> AuthenticationInterceptor()).addPathPatterns(<span class="string">"/api/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3、注解方式判断"><a href="#3、注解方式判断" class="headerlink" title="3、注解方式判断"></a>3、注解方式判断</h4><p>通过拦截器的方式配置，看上去非常的繁琐，如果我需要给某个接口添加一个角色访问权限，还需要去修改拦截器中的判断逻辑。当然Spring Security也提供了非常方便的注解模式去控制接口，需要修改哪个接口的角色访问，直接在接口上修改就可以了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('ADMIN')"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api2/admin"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">admin2Api</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello : "</span> + message;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize</span>(<span class="string">"hasRole('USER')"</span>)</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/api2/user"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">user2Api</span><span class="params">(String message)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"hello : "</span> + message;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>非常的简单，一个注解就帮我们解决了拦截器中完成的事情，其实他们的原理是差不多的。不过这里有几个需要关注的点</p><ul><li><p>@PreAuthorize注解的生效，需要提前开启的。需要在@EnableGlobalMethodSecurity(prePostEnabled = true) 注解中生效，因为PreAuthorize 默认是false</p></li><li><p>@PreAuthorize是支持表达式方式进行设置的，我用的是hasRole。是其内置的表达式库SecurityExpressionRoot中的方法</p></li><li><p>hasRole最终调用的是hasAnyAuthorityName的方法，这里会有一个缺省的前缀，当前你也可以写成hasRole(‘ROLE_ADMIN’)的。并且是变长数组，我们还可一进行多角色的判断例如：hasRole(‘ROLE’,’USER’)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">boolean</span> <span class="title">hasAnyAuthorityName</span><span class="params">(String prefix, String... roles)</span> </span>&#123;</span><br><span class="line">    Set&lt;String&gt; roleSet = getAuthoritySet();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String role : roles) &#123;</span><br><span class="line">        String defaultedRole = getRoleWithDefaultPrefix(prefix, role);</span><br><span class="line">        <span class="keyword">if</span> (roleSet.contains(defaultedRole)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><p>到这里，我们已经完成了基于拦截器和注解方式的接口授权设置，基本上都是在零配置的基础上完成的。我们写发现了，好像不太容易扩展信息，例如application.yml中没办法同时设置多个用户，认证成功后我想跳转到自定义的页面或者自定义的信息。别急，从下一篇开始，我们将逐步对代码进行改造，一步一步打造成你想满足的各种需求</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【认证与授权】Spring Security系列之认证流程解析</title>
      <link href="/2020/04/12/spring/security/security-cap04/"/>
      <url>/2020/04/12/spring/security/security-cap04/</url>
      
        <content type="html"><![CDATA[<blockquote><p>上面我们一起开始了Spring Security的初体验，并通过简单的配置甚至零配置就可以完成一个简单的认证流程。可能我们都有很大的疑惑，这中间到底发生了什么，为什么简单的配置就可以完成一个认证流程啊，可我啥都没看见，没有写页面，没有写接口。这一篇我们将深入到源码层面一起来了解一下spring security到底是怎么工作的。</p></blockquote><h3 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h3><p>在开始源码理解前，我们先来做一项基本的准备工作，从日志中去发现线索，因为我们发现什么都没有配置的情况下，他也可以正常的工作，并给我们预置了一个临时的用户user。那么他肯定是在工程启动的时候做了什么事情，上一篇我们也提到了是如果生成user用户和密码的。这篇我们将仔细的去了解一下。</p><a id="more"></a><p>1、<em>首先我们配置在<code>applicaiton.yml</code>中调整一下日志级别</em></p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">org.springframework.security:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><p>我们将<code>security</code>相关的日志打印出来，一起来启动或者运行的时候到底发生了什么。</p><p>2、<em>启动<code>spring-security-basic</code> 工程</em></p><p><img src="https://i.loli.net/2020/04/12/bohgYFAzqynPB2e.gif" alt=""></p><p>!!!找到了</p><h3 id="日志过滤"><a href="#日志过滤" class="headerlink" title="日志过滤"></a>日志过滤</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(1) Eagerly initializing &#123;org.springframework.boot.autoconfigure.security.servlet.WebSecurityEnablerConfiguration&#x3D;org.springframework.boot.autoconfigure.security.servlet.WebSecurityEnablerConfiguration@52e04737&#125;</span><br><span class="line">(2) Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity).</span><br><span class="line">(3) Adding web access control expression &#39;authenticated&#39;, for any request</span><br><span class="line">(4) Validated configuration attributes</span><br></pre></td></tr></table></figure><h3 id="逐个解析"><a href="#逐个解析" class="headerlink" title="逐个解析"></a>逐个解析</h3><h4 id="1、WebSecurityEnablerConfiguration"><a href="#1、WebSecurityEnablerConfiguration" class="headerlink" title="1、WebSecurityEnablerConfiguration"></a>1、<code>WebSecurityEnablerConfiguration</code></h4><p>告诉我们它初始化了一个配置类<code>WebSecurityEnablerConfiguration</code> 不管！找到源码再说</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnBean</span>(&#123;WebSecurityConfigurerAdapter<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">    <span class="title">name</span> </span>= &#123;<span class="string">"springSecurityFilterChain"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnWebApplication</span>(</span><br><span class="line">    type = Type.SERVLET</span><br><span class="line">)</span><br><span class="line"><span class="meta">@EnableWebSecurity</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityEnablerConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">WebSecurityEnablerConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>？？？怎么只有这么一点东西，这个类为什么会在初始化的时候启动？这里简单的指出来</p><p>首先找到<code>spring-boot-autoconfigure-版本.jar</code>下的<code>META-INF/spring.factorites</code>文件，其中有这样一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.UserDetailsServiceAutoConfiguration,\</span><br><span class="line">org.springframework.boot.autoconfigure.security.servlet.SecurityFilterAutoConfiguration,\</span><br></pre></td></tr></table></figure><p>我们可以暂时不去深究这是什么意思，总之，在<code>springboot</code>启动的时候，会将这里配置走一遍（后期可能也会写一点关于<code>springboot</code>启动原理的文章…）我们一个一个来看一下</p><h5 id="1-1-SecurityAutoConfiguration"><a href="#1-1-SecurityAutoConfiguration" class="headerlink" title="1.1 SecurityAutoConfiguration"></a>1.1 <code>SecurityAutoConfiguration</code></h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;DefaultAuthenticationEventPublisher<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">EnableConfigurationProperties</span>(</span>&#123;SecurityProperties<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">Import</span>(</span>&#123;SpringBootWebSecurityConfiguration<span class="class">.<span class="keyword">class</span>, <span class="title">WebSecurityEnablerConfiguration</span>.<span class="title">class</span>, <span class="title">SecurityDataConfiguration</span>.<span class="title">class</span>&#125;)</span></span><br><span class="line"><span class="class"><span class="title">public</span> <span class="title">class</span> <span class="title">SecurityAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(&#123;AuthenticationEventPublisher<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">    <span class="title">public</span> <span class="title">DefaultAuthenticationEventPublisher</span> <span class="title">authenticationEventPublisher</span>(<span class="title">ApplicationEventPublisher</span> <span class="title">publisher</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DefaultAuthenticationEventPublisher(publisher);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在这个类中我们重点关注</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">@EnableConfigurationProperties(&#123;SecurityProperties.class&#125;)</span><br><span class="line">@Import(&#123;SpringBootWebSecurityConfiguration.class, WebSecurityEnablerConfiguration.class, SecurityDataConfiguration.class&#125;)</span><br></pre></td></tr></table></figure><p>首先是<code>SecurityProperties</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">  <span class="comment">// A 前缀</span></span><br><span class="line">    prefix = <span class="string">"spring.security"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityProperties</span> </span>&#123;</span><br><span class="line"><span class="comment">// ..</span></span><br><span class="line">    <span class="keyword">private</span> SecurityProperties.User user = <span class="keyword">new</span> SecurityProperties.User();</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">      <span class="comment">// 默认指定一个</span></span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">"user"</span>;</span><br><span class="line">        <span class="comment">// 默认随机密码</span></span><br><span class="line">        <span class="keyword">private</span> String password = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> ArrayList();</span><br><span class="line">      <span class="comment">// 默认密码是系统生成的（重点关注一下）</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> passwordGenerated = <span class="keyword">true</span>;</span><br><span class="line"><span class="comment">// ...</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(String password)</span> </span>&#123;</span><br><span class="line">            <span class="comment">// 如果指定了自定义了密码，那就false 并覆盖password</span></span><br><span class="line">            <span class="keyword">if</span> (StringUtils.hasLength(password)) &#123;</span><br><span class="line">                <span class="keyword">this</span>.passwordGenerated = <span class="keyword">false</span>;</span><br><span class="line">                <span class="keyword">this</span>.password = password;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//.....</span></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// .....</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>篇幅问题这里我删除了很多代码。直接看里面的注释就好了，这也就是为什么我们不配置任何信息，也有一个默认的用户，以及我们用配置信息覆盖了默认用户的关键信息所在。</p><p>其次是<code>@Import</code>注解，这个其实就是xml配置方式中的标签 <imprort/> 引入另外的配置，这里引入了<code>SpringBootWebSecurityConfiguration</code> <code>WebSecurityEnablerConfiguration</code> <code>SecurityDataConfiguration</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">@Configuration(</span><br><span class="line">    proxyBeanMethods &#x3D; false</span><br><span class="line">)</span><br><span class="line">@ConditionalOnClass(&#123;WebSecurityConfigurerAdapter.class&#125;)</span><br><span class="line">@ConditionalOnMissingBean(&#123;WebSecurityConfigurerAdapter.class&#125;)</span><br><span class="line">@ConditionalOnWebApplication(</span><br><span class="line">    type &#x3D; Type.SERVLET</span><br><span class="line">)</span><br><span class="line">public class SpringBootWebSecurityConfiguration &#123;</span><br><span class="line">    public SpringBootWebSecurityConfiguration() &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    @Configuration(</span><br><span class="line">        proxyBeanMethods &#x3D; false</span><br><span class="line">    )</span><br><span class="line">    &#x2F;&#x2F; 其实也没干啥，就是一个空的对象，什么也没覆盖</span><br><span class="line">    @Order(2147483642)</span><br><span class="line">    static class DefaultConfigurerAdapter extends WebSecurityConfigurerAdapter &#123;</span><br><span class="line">        DefaultConfigurerAdapter() &#123;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>他们指向了一个关键的配置<code>@ConditionalOnBean({WebSecurityConfigurerAdapter.class})</code> 需要<code>WebSecurityConfigurerAdapter</code>才会进行加载，那这个关键的类是什么时候加载的呢？这就回到了我们在日志中发现的第一个加载的类信息<code>WebSecurityEnablerConfiguration</code> 上面有个一非常关键的注解<code>@EnableWebSecurity</code> </p><p>瞧瞧干了啥</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">@Retention(value &#x3D; java.lang.annotation.RetentionPolicy.RUNTIME)</span><br><span class="line">@Target(value &#x3D; &#123; java.lang.annotation.ElementType.TYPE &#125;)</span><br><span class="line">@Documented</span><br><span class="line">&#x2F;&#x2F; 引入了配置类 WebSecurityConfiguration</span><br><span class="line">@Import(&#123; WebSecurityConfiguration.class,</span><br><span class="line">SpringWebMvcImportSelector.class,</span><br><span class="line">OAuth2ImportSelector.class &#125;)</span><br><span class="line">@EnableGlobalAuthentication</span><br><span class="line">@Configuration</span><br><span class="line">public @interface EnableWebSecurity &#123;</span><br><span class="line"></span><br><span class="line">&#x2F;**</span><br><span class="line"> * Controls debugging support for Spring Security. Default is false.</span><br><span class="line"> * @return if true, enables debug support with Spring Security</span><br><span class="line"> *&#x2F;</span><br><span class="line">boolean debug() default false;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="1-2-WebSecurityConfiguration"><a href="#1-2-WebSecurityConfiguration" class="headerlink" title="1.2  WebSecurityConfiguration"></a>1.2  <code>WebSecurityConfiguration</code></h5><p>原来，首先他是个配置注解，也<code>import</code>了<code>WebSecurityConfiguration</code> </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(proxyBeanMethods = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfiguration</span> <span class="keyword">implements</span> <span class="title">ImportAware</span>, <span class="title">BeanClassLoaderAware</span> </span>&#123;</span><br><span class="line"><span class="comment">// 1、声明一个 webSecurity 一起来看一下他是什么时候初始化的</span></span><br><span class="line"><span class="keyword">private</span> WebSecurity webSecurity;</span><br><span class="line"><span class="comment">// 2、是否为调试模式</span></span><br><span class="line"><span class="keyword">private</span> Boolean debugEnabled;</span><br><span class="line"><span class="keyword">private</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> ClassLoader beanClassLoader;</span><br><span class="line"><span class="comment">// 3、关键点，后置对象处理器，用来初始化对象</span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="keyword">private</span> ObjectPostProcessor&lt;Object&gt; objectObjectPostProcessor;</span><br><span class="line">  </span><br><span class="line"><span class="meta">@Bean</span>(name = AbstractSecurityWebApplicationInitializer.DEFAULT_FILTER_NAME)</span><br><span class="line"><span class="function"><span class="keyword">public</span> Filter <span class="title">springSecurityFilterChain</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">boolean</span> hasConfigurers = webSecurityConfigurers != <span class="keyword">null</span></span><br><span class="line">&amp;&amp; !webSecurityConfigurers.isEmpty();</span><br><span class="line"><span class="comment">// 6 、如果每没初始化，直接指定获取对象 WebSecurityConfigurerAdapter</span></span><br><span class="line">    <span class="keyword">if</span> (!hasConfigurers) &#123;</span><br><span class="line">WebSecurityConfigurerAdapter adapter = objectObjectPostProcessor</span><br><span class="line">.postProcess(<span class="keyword">new</span> WebSecurityConfigurerAdapter() &#123;</span><br><span class="line">&#125;);</span><br><span class="line">webSecurity.apply(adapter);</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">// 7、 开始构建对象 webSecurity</span></span><br><span class="line"><span class="keyword">return</span> webSecurity.build();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 4、通过setter方式注入 webSecurityConfigurers </span></span><br><span class="line"><span class="meta">@Autowired</span>(required = <span class="keyword">false</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setFilterChainProxySecurityConfigurer</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ObjectPostProcessor&lt;Object&gt; objectPostProcessor,</span></span></span><br><span class="line"><span class="function"><span class="params">    // 获取 <span class="number">0</span> 步中获取到的对象信息</span></span></span><br><span class="line"><span class="function"><span class="params">@Value(<span class="string">"#&#123;@autowiredWebSecurityConfigurersIgnoreParents.getWebSecurityConfigurers()&#125;"</span>)</span> List&lt;SecurityConfigurer&lt;Filter, WebSecurity&gt;&gt; webSecurityConfigurers)</span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">    <span class="comment">// 5、 这里通过后置对象处理器来进行 webSecurity 的初始化</span></span><br><span class="line">webSecurity = objectPostProcessor.postProcess(<span class="keyword">new</span> WebSecurity(objectPostProcessor));</span><br><span class="line"><span class="keyword">if</span> (debugEnabled != <span class="keyword">null</span>) &#123;</span><br><span class="line">webSecurity.debug(debugEnabled);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">webSecurityConfigurers.sort(AnnotationAwareOrderComparator.INSTANCE);</span><br><span class="line"></span><br><span class="line">Integer previousOrder = <span class="keyword">null</span>;</span><br><span class="line">Object previousConfig = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; config : webSecurityConfigurers) &#123;</span><br><span class="line">Integer order = AnnotationAwareOrderComparator.lookupOrder(config);</span><br><span class="line"><span class="keyword">if</span> (previousOrder != <span class="keyword">null</span> &amp;&amp; previousOrder.equals(order)) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(</span><br><span class="line"><span class="string">"@Order on WebSecurityConfigurers must be unique. Order of "</span></span><br><span class="line">+ order + <span class="string">" was already used on "</span> + previousConfig + <span class="string">", so it cannot be used on "</span></span><br><span class="line">+ config + <span class="string">" too."</span>);</span><br><span class="line">&#125;</span><br><span class="line">previousOrder = order;</span><br><span class="line">previousConfig = config;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (SecurityConfigurer&lt;Filter, WebSecurity&gt; webSecurityConfigurer : webSecurityConfigurers) &#123;</span><br><span class="line">      <span class="comment">// 放入到 AbstractConfiguredSecurityBuilder 的配置集合中</span></span><br><span class="line">webSecurity.apply(webSecurityConfigurer);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">this</span>.webSecurityConfigurers = webSecurityConfigurers;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 0 先自动织入webSecurityConfigurers </span></span><br><span class="line">  <span class="comment">// 关键点就是获取 beanFactory.getBeansOfType(WebSecurityConfigurer.class);</span></span><br><span class="line">  <span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> AutowiredWebSecurityConfigurersIgnoreParents <span class="title">autowiredWebSecurityConfigurersIgnoreParents</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">ConfigurableListableBeanFactory beanFactory)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> AutowiredWebSecurityConfigurersIgnoreParents(beanFactory);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们已经看到了步骤7，通常情况下都会去<code>build</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractSecurityBuilder</span>&lt;<span class="title">O</span>&gt; <span class="keyword">implements</span> <span class="title">SecurityBuilder</span>&lt;<span class="title">O</span>&gt; </span>&#123;</span><br><span class="line"><span class="keyword">private</span> AtomicBoolean building = <span class="keyword">new</span> AtomicBoolean();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> O object;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> O <span class="title">build</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>.building.compareAndSet(<span class="keyword">false</span>, <span class="keyword">true</span>)) &#123;</span><br><span class="line"><span class="comment">// 这里调用doBuild的最终方法</span></span><br><span class="line">      <span class="keyword">this</span>.object = doBuild();</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> AlreadyBuiltException(<span class="string">"This object has already been built"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">final</span> O <span class="title">getObject</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (!<span class="keyword">this</span>.building.get()) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> IllegalStateException(<span class="string">"This object has not been built"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>.object;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 这里是抽象方法，直接找到其唯一的子类 AbstractConfiguredSecurityBuilder</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> O <span class="title">doBuild</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> O <span class="title">doBuild</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">synchronized</span> (configurers) &#123;</span><br><span class="line">buildState = BuildState.INITIALIZING;</span><br><span class="line"><span class="comment">// 前置检查</span></span><br><span class="line">beforeInit();</span><br><span class="line">      <span class="comment">// 初始化</span></span><br><span class="line">init();</span><br><span class="line">buildState = BuildState.CONFIGURING;</span><br><span class="line">beforeConfigure();</span><br><span class="line">configure();</span><br><span class="line">buildState = BuildState.BUILDING;</span><br><span class="line">O result = performBuild();</span><br><span class="line">buildState = BuildState.BUILT;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不知不觉我们已经找到了<code>spring</code>中的关键方法<code>init</code>了，很多时候我们在定义接口是都会有一个<code>init</code>方法来定义注入时调用</p><p>前面我们知道 <code>SpringBootWebSecurityConfiguration</code>初始化了一个对象，同时也通过<code>AutowiredWebSecurityConfigurersIgnoreParents</code>拿到了<code>WebSecurityConfigurerAdapter</code>的子类 <code>DefaultConfigurerAdapter</code>，现在开始<code>init()</code>,其实就是开始<code>WebSecurityConfigurerAdapter</code>的<code>init()</code>方法。说了这里可能有的同学就会比较熟悉了，这就是关键配置的适配器类。</p><p>代码稍后贴出来，暂时先不看，到这里为止，我们才梳理了<code>springboot</code>自动配置中的<code>SecurityAutoConfiguration</code> </p><p>下面我们才开始第二个类</p><h4 id="2、-UserDetailsServiceAutoConfiguration"><a href="#2、-UserDetailsServiceAutoConfiguration" class="headerlink" title="2、  UserDetailsServiceAutoConfiguration"></a>2、  <code>UserDetailsServiceAutoConfiguration</code></h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span>(</span><br><span class="line">    proxyBeanMethods = <span class="keyword">false</span></span><br><span class="line">)</span><br><span class="line"><span class="meta">@ConditionalOnClass</span>(&#123;AuthenticationManager<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnBean</span>(</span>&#123;ObjectPostProcessor<span class="class">.<span class="keyword">class</span>&#125;)</span></span><br><span class="line"><span class="class">@<span class="title">ConditionalOnMissingBean</span>(</span></span><br><span class="line"><span class="class">    <span class="title">value</span> </span>= &#123;AuthenticationManager<span class="class">.<span class="keyword">class</span>, <span class="title">AuthenticationProvider</span>.<span class="title">class</span>, <span class="title">UserDetailsService</span>.<span class="title">class</span>&#125;,</span></span><br><span class="line"><span class="class">    <span class="title">type</span> </span>= &#123;<span class="string">"org.springframework.security.oauth2.jwt.JwtDecoder"</span>, <span class="string">"org.springframework.security.oauth2.server.resource.introspection.OpaqueTokenIntrospector"</span>&#125;</span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UserDetailsServiceAutoConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String NOOP_PASSWORD_PREFIX = <span class="string">"&#123;noop&#125;"</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Pattern PASSWORD_ALGORITHM_PATTERN = Pattern.compile(<span class="string">"^\\&#123;.+&#125;.*$"</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Log logger = LogFactory.getLog(UserDetailsServiceAutoConfiguration<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">UserDetailsServiceAutoConfiguration</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@ConditionalOnMissingBean</span>(</span><br><span class="line">        type = &#123;<span class="string">"org.springframework.security.oauth2.client.registration.ClientRegistrationRepository"</span>&#125;</span><br><span class="line">    )</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 这里加载了从配置文件或者默认生成的用户信息，以及加密方法</span></span><br><span class="line">    <span class="meta">@Lazy</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> InMemoryUserDetailsManager <span class="title">inMemoryUserDetailsManager</span><span class="params">(SecurityProperties properties, ObjectProvider&lt;PasswordEncoder&gt; passwordEncoder)</span> </span>&#123;</span><br><span class="line">        User user = properties.getUser();</span><br><span class="line">        List&lt;String&gt; roles = user.getRoles();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> InMemoryUserDetailsManager(<span class="keyword">new</span> UserDetails[]&#123;org.springframework.security.core.userdetails.User.withUsername(user.getName()).password(<span class="keyword">this</span>.getOrDeducePassword(user, (PasswordEncoder)passwordEncoder.getIfAvailable())).roles(StringUtils.toStringArray(roles)).build()&#125;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getOrDeducePassword</span><span class="params">(User user, PasswordEncoder encoder)</span> </span>&#123;</span><br><span class="line">        String password = user.getPassword();</span><br><span class="line">        <span class="keyword">if</span> (user.isPasswordGenerated()) &#123;</span><br><span class="line">            logger.info(String.format(<span class="string">"%n%nUsing generated security password: %s%n"</span>, user.getPassword()));</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> encoder == <span class="keyword">null</span> &amp;&amp; !PASSWORD_ALGORITHM_PATTERN.matcher(password).matches() ? <span class="string">"&#123;noop&#125;"</span> + password : password;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><em>这里也出现了一个<code>info</code>日志，当我们使用默认<code>user</code>用户时，密码会从这里打印在控制台</em></p><p>这个配置类的关键就是生成一个默认的<code>InMemoryUserDetailsManager</code>对象。</p><h4 id="4、SecurityFilterAutoConfiguration"><a href="#4、SecurityFilterAutoConfiguration" class="headerlink" title="4、SecurityFilterAutoConfiguration"></a>4、<code>SecurityFilterAutoConfiguration</code></h4><p>这个类就不详细介绍了，就是注册一些过滤器。</p><hr><p>回到<code>WebSecurityConfigurerAdapter</code> 这个适配器类，我们关注基本的<code>init()</code>方法，其他的都是一些默认的配置</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">final</span> WebSecurity web)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">final</span> HttpSecurity http = getHttp();</span><br><span class="line">web.addSecurityFilterChainBuilder(http).postBuildAction(() -&gt; &#123;</span><br><span class="line">FilterSecurityInterceptor securityInterceptor = http</span><br><span class="line">.getSharedObject(FilterSecurityInterceptor<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line">web.securityInterceptor(securityInterceptor);</span><br><span class="line">&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里有一个关键的方法<code>getHttp()</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> HttpSecurity <span class="title">getHttp</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (http != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> http;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">DefaultAuthenticationEventPublisher eventPublisher = objectPostProcessor</span><br><span class="line">.postProcess(<span class="keyword">new</span> DefaultAuthenticationEventPublisher());</span><br><span class="line">localConfigureAuthenticationBldr.authenticationEventPublisher(eventPublisher);</span><br><span class="line"></span><br><span class="line">AuthenticationManager authenticationManager = authenticationManager();</span><br><span class="line">authenticationBuilder.parentAuthenticationManager(authenticationManager);</span><br><span class="line">authenticationBuilder.authenticationEventPublisher(eventPublisher);</span><br><span class="line"><span class="comment">// 获取创建共享的对象</span></span><br><span class="line">   Map&lt;Class&lt;?&gt;, Object&gt; sharedObjects = createSharedObjects();</span><br><span class="line"></span><br><span class="line">http = <span class="keyword">new</span> HttpSecurity(objectPostProcessor, authenticationBuilder,</span><br><span class="line">sharedObjects);</span><br><span class="line"><span class="keyword">if</span> (!disableDefaults) &#123;</span><br><span class="line"><span class="comment">// @formatter:off</span></span><br><span class="line">http</span><br><span class="line">.csrf().and()</span><br><span class="line">.addFilter(<span class="keyword">new</span> WebAsyncManagerIntegrationFilter())</span><br><span class="line">.exceptionHandling().and()</span><br><span class="line">.headers().and()</span><br><span class="line">.sessionManagement().and()</span><br><span class="line">.securityContext().and()</span><br><span class="line">.requestCache().and()</span><br><span class="line">.anonymous().and()</span><br><span class="line">.servletApi().and()</span><br><span class="line">.apply(<span class="keyword">new</span> DefaultLoginPageConfigurer&lt;&gt;()).and()</span><br><span class="line">.logout();</span><br><span class="line"><span class="comment">// @formatter:on</span></span><br><span class="line">ClassLoader classLoader = <span class="keyword">this</span>.context.getClassLoader();</span><br><span class="line">List&lt;AbstractHttpConfigurer&gt; defaultHttpConfigurers =</span><br><span class="line">SpringFactoriesLoader.loadFactories(AbstractHttpConfigurer<span class="class">.<span class="keyword">class</span>, <span class="title">classLoader</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (AbstractHttpConfigurer configurer : defaultHttpConfigurers) &#123;</span><br><span class="line">http.apply(configurer);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">   <span class="comment">// httpHttpSecurity 的表单配置</span></span><br><span class="line">configure(http);</span><br><span class="line"><span class="keyword">return</span> http;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们简单列举几个重要的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 根据系统加载的AuthenticationManagerBuilder 在装配用户</span></span><br><span class="line"><span class="function"><span class="keyword">protected</span> UserDetailsService <span class="title">userDetailsService</span><span class="params">()</span> </span>&#123;</span><br><span class="line">AuthenticationManagerBuilder globalAuthBuilder = context</span><br><span class="line">.getBean(AuthenticationManagerBuilder<span class="class">.<span class="keyword">class</span>)</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> UserDetailsServiceDelegator(Arrays.asList(</span><br><span class="line">localConfigureAuthenticationBldr, globalAuthBuilder));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">configure</span><span class="params">(HttpSecurity http)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">logger.debug(<span class="string">"Using default configure(HttpSecurity). If subclassed this will potentially override subclass configure(HttpSecurity)."</span>);</span><br><span class="line"><span class="comment">// 资源保护</span></span><br><span class="line">http</span><br><span class="line">.authorizeRequests()</span><br><span class="line">.anyRequest().authenticated()</span><br><span class="line">.and()</span><br><span class="line">      <span class="comment">// 认证页面</span></span><br><span class="line">.formLogin().and()</span><br><span class="line">      <span class="comment">//  HTTP Basic authentication.</span></span><br><span class="line">.httpBasic();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面我们都是通过启动日志的信息来理解应用在启动时到底做了什么，加载了什么关键信息，接下来我们将通过运行时的日志看来看一下我们在认证过程中是如何进行用户名密码的校验的。</p><h3 id="登录流程"><a href="#登录流程" class="headerlink" title="登录流程"></a>登录流程</h3><p>我们打开浏览器输入<code>localhost:8080</code> 由于我们没有进行登录，所以会被<code>redirecting</code>到登录页面。我们一起过滤一下控制台信息，抓取到关键的信息。</p><p><img src="https://i.loli.net/2020/04/12/zAcdNX2fU7OhDP3.gif" alt=""></p><p>我们看到，这里加载了各种过滤器，当访问<code>/</code>时没发现并没有登录，则重定向到默认的<code>/login</code>页面，这也是<code>spirng security</code>的核心。今天重点讨论登录流程，我们先清空控制台，用正确的用户名和密码登录进去。</p><p><img src="https://i.loli.net/2020/04/12/tEOGu6LHUPj9msg.jpg" alt=""></p><p>从控制台我们可以看到很多的过滤器，我们至关注认证流程的一部分，已上图为准。</p><h4 id="1、UsernamePasswordAuthenticationFilter"><a href="#1、UsernamePasswordAuthenticationFilter" class="headerlink" title="1、UsernamePasswordAuthenticationFilter"></a>1、UsernamePasswordAuthenticationFilter</h4><p>这理解这个过滤器前，我们先从他的父类<code>AbstractAuthenticationProcessingFilter</code> 入手，既然是过滤器，我们既要入<code>doFilter</code>入手， 这里是关键的流程，子类只是做具体的实现，我们稍后再看</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doFilter</span><span class="params">(ServletRequest req, ServletResponse res, FilterChain chain)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="comment">// 请求的转化</span></span><br><span class="line">        HttpServletRequest request = (HttpServletRequest)req;</span><br><span class="line">        HttpServletResponse response = (HttpServletResponse)res;</span><br><span class="line">        <span class="keyword">if</span> (!<span class="keyword">this</span>.requiresAuthentication(request, response)) &#123;</span><br><span class="line">            chain.doFilter(request, response);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.debug(<span class="string">"Request is to process authentication"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            Authentication authResult;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="comment">// 关键的认证方法，交由子类来实现，我们到子类看</span></span><br><span class="line">                authResult = <span class="keyword">this</span>.attemptAuthentication(request, response);</span><br><span class="line">                <span class="keyword">if</span> (authResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">this</span>.sessionStrategy.onAuthentication(authResult, request, response);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (InternalAuthenticationServiceException var8) &#123;</span><br><span class="line">                <span class="keyword">this</span>.logger.error(<span class="string">"An internal error occurred while trying to authenticate the user."</span>, var8);</span><br><span class="line">                <span class="keyword">this</span>.unsuccessfulAuthentication(request, response, var8);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (AuthenticationException var9) &#123;</span><br><span class="line">                <span class="keyword">this</span>.unsuccessfulAuthentication(request, response, var9);</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.continueChainBeforeSuccessfulAuthentication) &#123;</span><br><span class="line">                chain.doFilter(request, response);</span><br><span class="line">            &#125;</span><br><span class="line"><span class="comment">// 返回认证成功</span></span><br><span class="line">            <span class="keyword">this</span>.successfulAuthentication(request, response, chain, authResult);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>上面的关键方法<code>attemptAuthentication(request, response);</code>在<code>UsernamePasswordAuthenticationFilter</code>中</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">attemptAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response)</span> <span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.postOnly &amp;&amp; !request.getMethod().equals(<span class="string">"POST"</span>)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> AuthenticationServiceException(<span class="string">"Authentication method not supported: "</span> + request.getMethod());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">          <span class="comment">// 通过“username”拿到用户名</span></span><br><span class="line">            String username = <span class="keyword">this</span>.obtainUsername(request);</span><br><span class="line">          <span class="comment">// 通过"password" 拿到密码</span></span><br><span class="line">            String password = <span class="keyword">this</span>.obtainPassword(request);</span><br><span class="line">            <span class="keyword">if</span> (username == <span class="keyword">null</span>) &#123;</span><br><span class="line">                username = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (password == <span class="keyword">null</span>) &#123;</span><br><span class="line">                password = <span class="string">""</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            username = username.trim();</span><br><span class="line">          <span class="comment">// 传入UsernamePasswordAuthenticationToken构造方法，此类是Authentication的子类</span></span><br><span class="line">          <span class="comment">// 此时还没有认证（false）</span></span><br><span class="line">            UsernamePasswordAuthenticationToken authRequest = <span class="keyword">new</span> UsernamePasswordAuthenticationToken(username, password);</span><br><span class="line">            <span class="keyword">this</span>.setDetails(request, authRequest);</span><br><span class="line">          <span class="comment">// 交由AuthenticationManager 去处理</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">this</span>.getAuthenticationManager().authenticate(authRequest);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>在<code>UsernamePasswordAuthenticationFilter</code> 的关键流程中，我们将请求的参数进行符合入参的封装，</p><h4 id="2、AuthenticationManager"><a href="#2、AuthenticationManager" class="headerlink" title="2、AuthenticationManager"></a>2、AuthenticationManager</h4><p><code>AuthenticationManager</code>本身不包含认证逻辑，其核心是用来管理所有的 <code>AuthenticationProvider</code>，通过交由合适的 <code>AuthenticationProvider</code> 来实现认证。</p><h4 id="3、AuthenticationProvider"><a href="#3、AuthenticationProvider" class="headerlink" title="3、AuthenticationProvider"></a>3、AuthenticationProvider</h4><p><code>Spring Security</code> 支持多种认证逻辑，每一种认证逻辑的认证方式其实就是一种 <code>AuthenticationProvider</code>。通过 <code>getProviders()</code>方法就能获取所有的<code>AuthenticationProvider</code>，通过<code>provider.supports()</code>来判断 provider 是否支持当前的认证逻辑。</p><p>当选择好一个合适的<code>AuthenticationProvider</code> 后，通过 <code>provider.authenticate(authentication)</code> 来让 <code>AuthenticationProvider</code>进行认证。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">Class&lt;? extends Authentication&gt; toTest = authentication.getClass();</span><br><span class="line">AuthenticationException lastException = <span class="keyword">null</span>;</span><br><span class="line">AuthenticationException parentException = <span class="keyword">null</span>;</span><br><span class="line">Authentication result = <span class="keyword">null</span>;</span><br><span class="line">Authentication parentResult = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">boolean</span> debug = logger.isDebugEnabled();</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (AuthenticationProvider provider : getProviders()) &#123;</span><br><span class="line"><span class="comment">// 判断是否是其支持的provider</span></span><br><span class="line">      <span class="keyword">if</span> (!provider.supports(toTest)) &#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (debug) &#123;</span><br><span class="line">logger.debug(<span class="string">"Authentication attempt using "</span></span><br><span class="line">+ provider.getClass().getName());</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 由具体的provider去进行处理</span></span><br><span class="line">result = provider.authenticate(authentication);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line">copyDetails(authentication, result);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AccountStatusException | InternalAuthenticationServiceException e) &#123;</span><br><span class="line">prepareException(e, authentication);</span><br><span class="line"><span class="comment">// SEC-546: Avoid polling additional providers if auth failure is due to</span></span><br><span class="line"><span class="comment">// invalid account status</span></span><br><span class="line"><span class="keyword">throw</span> e;</span><br><span class="line">&#125; <span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">lastException = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result == <span class="keyword">null</span> &amp;&amp; parent != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="comment">// Allow the parent to try.</span></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 如果还是没有结果，交由父类在处理一次</span></span><br><span class="line">result = parentResult = parent.authenticate(authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (ProviderNotFoundException e) &#123;</span><br><span class="line"><span class="comment">// ignore as we will throw below if no other exception occurred prior to</span></span><br><span class="line"><span class="comment">// calling parent and the parent</span></span><br><span class="line"><span class="comment">// may throw ProviderNotFound even though a provider in the child already</span></span><br><span class="line"><span class="comment">// handled the request</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException e) &#123;</span><br><span class="line">lastException = parentException = e;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (result != <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">if</span> (eraseCredentialsAfterAuthentication</span><br><span class="line">&amp;&amp; (result <span class="keyword">instanceof</span> CredentialsContainer)) &#123;</span><br><span class="line"><span class="comment">// Authentication is complete. Remove credentials and other secret data</span></span><br><span class="line"><span class="comment">// from authentication</span></span><br><span class="line">((CredentialsContainer) result).eraseCredentials();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the parent AuthenticationManager was attempted and successful than it will publish an AuthenticationSuccessEvent</span></span><br><span class="line"><span class="comment">// This check prevents a duplicate AuthenticationSuccessEvent if the parent AuthenticationManager already published it</span></span><br><span class="line"><span class="keyword">if</span> (parentResult == <span class="keyword">null</span>) &#123;</span><br><span class="line">eventPublisher.publishAuthenticationSuccess(result);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Parent was null, or didn't authenticate (or throw an exception).</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (lastException == <span class="keyword">null</span>) &#123;</span><br><span class="line">lastException = <span class="keyword">new</span> ProviderNotFoundException(messages.getMessage(</span><br><span class="line"><span class="string">"ProviderManager.providerNotFound"</span>,</span><br><span class="line"><span class="keyword">new</span> Object[] &#123; toTest.getName() &#125;,</span><br><span class="line"><span class="string">"No AuthenticationProvider found for &#123;0&#125;"</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// If the parent AuthenticationManager was attempted and failed than it will publish an AbstractAuthenticationFailureEvent</span></span><br><span class="line"><span class="comment">// This check prevents a duplicate AbstractAuthenticationFailureEvent if the parent AuthenticationManager already published it</span></span><br><span class="line"><span class="keyword">if</span> (parentException == <span class="keyword">null</span>) &#123;</span><br><span class="line">prepareException(lastException, authentication);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">throw</span> lastException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4、AbstractUserDetailsAuthenticationProvider"><a href="#4、AbstractUserDetailsAuthenticationProvider" class="headerlink" title="4、AbstractUserDetailsAuthenticationProvider"></a>4、AbstractUserDetailsAuthenticationProvider</h4><p>表单登录的 <code>AuthenticationProvider</code>主要是由 <code>AbstractUserDetailsAuthenticationProvider</code> 来进行处理的，我们来看下它的 <code>authenticate()</code>方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Authentication <span class="title">authenticate</span><span class="params">(Authentication authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">Assert.isInstanceOf(UsernamePasswordAuthenticationToken<span class="class">.<span class="keyword">class</span>, <span class="title">authentication</span>,</span></span><br><span class="line"><span class="class">() -&gt; <span class="title">messages</span>.<span class="title">getMessage</span>(</span></span><br><span class="line">"AbstractUserDetailsAuthenticationProvider.onlySupports",</span><br><span class="line"><span class="string">"Only UsernamePasswordAuthenticationToken is supported"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// Determine username</span></span><br><span class="line">String username = (authentication.getPrincipal() == <span class="keyword">null</span>) ? <span class="string">"NONE_PROVIDED"</span></span><br><span class="line">: authentication.getName();</span><br><span class="line"></span><br><span class="line"><span class="keyword">boolean</span> cacheWasUsed = <span class="keyword">true</span>;</span><br><span class="line">    <span class="comment">// 默认从缓存中去，如果没有则调用retrieveUser</span></span><br><span class="line">UserDetails user = <span class="keyword">this</span>.userCache.getUserFromCache(username);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UsernameNotFoundException notFound) &#123;</span><br><span class="line">logger.debug(<span class="string">"User '"</span> + username + <span class="string">"' not found"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (hideUserNotFoundExceptions) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> BadCredentialsException(messages.getMessage(</span><br><span class="line"><span class="string">"AbstractUserDetailsAuthenticationProvider.badCredentials"</span>,</span><br><span class="line"><span class="string">"Bad credentials"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> notFound;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Assert.notNull(user,</span><br><span class="line"><span class="string">"retrieveUser returned null - a violation of the interface contract"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">preAuthenticationChecks.check(user);</span><br><span class="line">additionalAuthenticationChecks(user,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (AuthenticationException exception) &#123;</span><br><span class="line"><span class="keyword">if</span> (cacheWasUsed) &#123;</span><br><span class="line"><span class="comment">// There was a problem, so try again after checking</span></span><br><span class="line"><span class="comment">// we're using latest data (i.e. not from the cache)</span></span><br><span class="line">cacheWasUsed = <span class="keyword">false</span>;</span><br><span class="line">user = retrieveUser(username,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">preAuthenticationChecks.check(user);</span><br><span class="line">additionalAuthenticationChecks(user,</span><br><span class="line">(UsernamePasswordAuthenticationToken) authentication);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">throw</span> exception;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 校验密码等信息</span></span><br><span class="line">postAuthenticationChecks.check(user);</span><br><span class="line"><span class="comment">// 放入缓存</span></span><br><span class="line"><span class="keyword">if</span> (!cacheWasUsed) &#123;</span><br><span class="line"><span class="keyword">this</span>.userCache.putUserInCache(user);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Object principalToReturn = user;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (forcePrincipalAsString) &#123;</span><br><span class="line">principalToReturn = user.getUsername();</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 认证成功后放入认证成功的信息，里面也是放入传入UsernamePasswordAuthenticationToken另一个构造方法</span></span><br><span class="line"><span class="keyword">return</span> createSuccessAuthentication(principalToReturn, authentication, user);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么关键的<code>retrieveUser</code>里面是什么样呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">final</span> UserDetails <span class="title">retrieveUser</span><span class="params">(String username,</span></span></span><br><span class="line"><span class="function"><span class="params">UsernamePasswordAuthenticationToken authentication)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> AuthenticationException </span>&#123;</span><br><span class="line">prepareTimingAttackProtection();</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">     <span class="comment">// 用具体的UserDetailSercvice去获取用户信息</span></span><br><span class="line">UserDetails loadedUser = <span class="keyword">this</span>.getUserDetailsService().loadUserByUsername(username);</span><br><span class="line"><span class="keyword">if</span> (loadedUser == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(</span><br><span class="line"><span class="string">"UserDetailsService returned null, which is an interface contract violation"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> loadedUser;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (UsernameNotFoundException ex) &#123;</span><br><span class="line">mitigateAgainstTimingAttack(authentication);</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (InternalAuthenticationServiceException ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> ex;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (Exception ex) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> InternalAuthenticationServiceException(ex.getMessage(), ex);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于我们的用户信息是在<code>UserDetailsServiceAutoConfiguration</code> 的配置类中生成了 <code>InMemoryUserDetailsManager</code>，所以这里的<code>loadUserByUsername</code>的代码则是这样</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> UserDetails <span class="title">loadUserByUsername</span><span class="params">(String username)</span></span></span><br><span class="line"><span class="function"><span class="keyword">throws</span> UsernameNotFoundException </span>&#123;</span><br><span class="line">UserDetails user = users.get(username.toLowerCase());</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line"><span class="keyword">throw</span> <span class="keyword">new</span> UsernameNotFoundException(username);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> User(user.getUsername(), user.getPassword(), user.isEnabled(),</span><br><span class="line">user.isAccountNonExpired(), user.isCredentialsNonExpired(),</span><br><span class="line">user.isAccountNonLocked(), user.getAuthorities());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在内存中维护的用户中去获取，那么如果是其他的用户存储则需要对应的获取方式，如果是保存在数据库那么就需要通过<code>sq</code>l语句去获取了，感兴趣的可以直接点击<code>JdbcUserDetailsManager</code>查看相关代码。</p><p>其实真个认证的流程到这里也就结束了，至于成功或失败后的逻辑最后还是回到了<code>UsernamePasswordAuthenticationFilter</code>中的结果，如果是成功<code>this.successfulAuthentication(request, response, chain, authResult);</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">successfulAuthentication</span><span class="params">(HttpServletRequest request, HttpServletResponse response, FilterChain chain, Authentication authResult)</span> <span class="keyword">throws</span> IOException, ServletException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.logger.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="keyword">this</span>.logger.debug(<span class="string">"Authentication success. Updating SecurityContextHolder to contain: "</span> + authResult);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 将认证结果放入到上下文中</span></span><br><span class="line">        SecurityContextHolder.getContext().setAuthentication(authResult);</span><br><span class="line">        <span class="keyword">this</span>.rememberMeServices.loginSuccess(request, response, authResult);</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span>.eventPublisher != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">this</span>.eventPublisher.publishEvent(<span class="keyword">new</span> InteractiveAuthenticationSuccessEvent(authResult, <span class="keyword">this</span>.getClass()));</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">// 后去的跳转等信息</span></span><br><span class="line">        <span class="keyword">this</span>.successHandler.onAuthenticationSuccess(request, response, authResult);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>以上便是<code>spring security</code>的认证流程，没想到篇幅会这么长，断点追踪的方式很痛苦，大致方向应该是对的，基本的认证流程也应该浮出水面了。本篇主要是从自动配置的方式出发，后续将展示其他的配置方式甚至自定义认证流程，加油！！！</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【认证与授权】Spring Security系列之初体验</title>
      <link href="/2020/04/07/spring/security/security-cap03/"/>
      <url>/2020/04/07/spring/security/security-cap03/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本篇将开始Spring Security的学习，将从最简单的搭建工程到自定义配置改造的方式完成一系列的教程。所有的代码将集中在一个工程中，通过不同的module的方式区分每一个篇章，重点突出每个module的特点，关注一个方面的功能或者配置</p></blockquote><h3 id="什么是Spring-Security"><a href="#什么是Spring-Security" class="headerlink" title="什么是Spring Security"></a>什么是Spring Security</h3><blockquote><p>上面介绍的：</p><p>”Spring Security is a powerful and highly customizable authentication and access-control framework. It is the de-facto standard for securing Spring-based applications.“</p><p>“Spring Security is a framework that focuses on providing both authentication and authorization to Java applications. Like all Spring projects, the real power of Spring Security is found in how easily it can be extended to meet custom requirements”</p><p>简单点说呢，spring security是一个非常牛的认证与授权框架。在前面的篇幅中我们介绍了，既然是认证与授权框架，那么肯定具备<em>用户登录认证</em> <em>基于RBAC的授权访问</em> 等功能了?没错。</p></blockquote><a id="more"></a><p><em>既然这么牛批，那我们就一起来看一下牛在哪里呢？</em></p><p>由于这是一个系列的学习教程，所以我将通过一个父pom的方式管理多个module，每一个module将负责一块知识点或者配置方式的案例。</p><p><img src="https://i.loli.net/2020/04/07/1Nzc7hodSFfGlyT.jpg" alt=""></p><h3 id="初体验"><a href="#初体验" class="headerlink" title="初体验"></a>初体验</h3><blockquote><p>本模块工程名spring-security-basic</p></blockquote><p>接下来我们一起来搭建一个最简单的认证工程</p><h4 id="1、pom-xml"><a href="#1、pom-xml" class="headerlink" title="1、pom.xml"></a>1、pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>security-study<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.wujiwen.security<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.0.1-SNAPSHOT<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-security-basic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h4 id="2、启动配置"><a href="#2、启动配置" class="headerlink" title="2、启动配置"></a>2、启动配置</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.wujiwen.security.basic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.SpringApplication;</span><br><span class="line"><span class="keyword">import</span> org.springframework.boot.autoconfigure.SpringBootApplication;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Desc:</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> wujw</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@email</span> jiwenwu@outlook.com</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/4/7</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityBasicApplication</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run(SecurityBasicApplication<span class="class">.<span class="keyword">class</span>,<span class="title">args</span>)</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了！？？？ </p><p><img src="https://i.loli.net/2020/04/08/RKjvXShlQYdpCMU.png" alt=""></p><p>没错，好了。我们一起来看一下吧</p><p>其实这个时候我们已经完成了一个最简单的登录认证功能了。</p><p><img src="https://i.loli.net/2020/04/08/idDaBznUGKjyX9l.gif" alt=""></p><p><code>spring security</code>在工程启动的时候默认给我们生成了一组用户，可以看到我输入的用户名是user密码是控制台的一组随机字符串。登录成功重定向到了根路径，也就是最开始输入的路径。有人会问了，那不是404嘛，没错！但我们尚未设置根路径访问的资源啊。第一次请求<code>localhost:8080</code>的时候由于系统判定未登录会跳转到登录页面<code>localhost:8080/login</code> 。你可能又会问了，这样的用户名和密码也太奇怪了吧？我们带着这个疑问一起来看一下到底发生了什么？</p><h3 id="自定义用户配置"><a href="#自定义用户配置" class="headerlink" title="自定义用户配置"></a>自定义用户配置</h3><p>我们找到这个路径<code>org.springframework.boot.autoconfigure.security.SecurityProperties.User</code>会看到这样一段代码</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ConfigurationProperties</span>(</span><br><span class="line">    prefix = <span class="string">"spring.security"</span></span><br><span class="line">)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SecurityProperties</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> BASIC_AUTH_ORDER = <span class="number">2147483642</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> IGNORED_ORDER = -<span class="number">2147483648</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">int</span> DEFAULT_FILTER_ORDER = -<span class="number">100</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SecurityProperties.Filter filter = <span class="keyword">new</span> SecurityProperties.Filter();</span><br><span class="line">    <span class="keyword">private</span> SecurityProperties.User user = <span class="keyword">new</span> SecurityProperties.User();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SecurityProperties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SecurityProperties.<span class="function">User <span class="title">getUser</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.user;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> SecurityProperties.<span class="function">Filter <span class="title">getFilter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.filter;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> String name = <span class="string">"user"</span>;</span><br><span class="line">        <span class="keyword">private</span> String password = UUID.randomUUID().toString();</span><br><span class="line">        <span class="keyword">private</span> List&lt;String&gt; roles = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">boolean</span> passwordGenerated = <span class="keyword">true</span>;</span><br><span class="line">    </span><br><span class="line">        <span class="comment">// 省略</span></span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">// 省略</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在读取默认配置<code>prefix:spring.security</code>时，由于我们的application.yml中什么都没有写，所以默认生成了一个user为用户名UUID为密码的用户信息。知道了这点，我们就可以自定义一个用户信息来覆盖这里的默认配置。</p><p>1、application.yml自定义用户</p><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">security:</span></span><br><span class="line">    <span class="attr">user:</span></span><br><span class="line">      <span class="attr">name:</span> <span class="string">admin</span></span><br><span class="line">      <span class="attr">password:</span> <span class="string">admin</span></span><br></pre></td></tr></table></figure><p>这时重新启动工程，我们就可以用新的用户进行登录了。</p><p>2、验证登录用户信息</p><p>前面我们提到了，登录成功后会重定向到根路径<code>localhost:8080</code>,为了验证登录的用户信息，我们来添加一个根路径的请求，并返回用户的信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BasicController</span> </span>&#123;</span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">rootPath</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        Principal userPrincipal = request.getUserPrincipal();</span><br><span class="line">        String name = userPrincipal.getName();</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"您好："</span> + name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个时候启动工程，我们已经发现控制台没有再输出随机的字符密码来，说明我们配置的<code>admin</code>用户已经生效了。</p><p><img src="https://i.loli.net/2020/04/08/cdp4NoWhLenG3iE.gif" alt=""></p><p>这样我们一个最简单的认证登录流程就完成了，是不是很简单，我们几乎没有做任何配置，只是简单的引入依赖就可以完成流程。初体验完成，后期我们还将继续了解<code>spring security</code>的更多功能并尝试从源码的教育来分析为什么是这样。</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【认证与授权】2、基于session的认证方式</title>
      <link href="/2020/04/05/spring/security/security-cap02/"/>
      <url>/2020/04/05/spring/security/security-cap02/</url>
      
        <content type="html"><![CDATA[<p>这一篇将通过一个简单的<code>web</code>项目实现基于<code>Session</code>的认证授权方式，也是以往传统项目的做法。<br><em>先来复习一下流程</em></p><blockquote><p>用户认证通过以后，在服务端生成用户相关的数据保存在当前会话<code>（Session）</code>中，发给客户端的数据将通过<code>session_id</code>存放在<code>cookie</code>中。在后续的请求操作中，客户端将带上<code>session_id</code>，服务端就可以验证是否存在了，并可拿到其中的数据校验其合法性。当用户退出系统或<code>session_id</code>到期时，服务端则会销毁<code>session_id</code>。具体可查看上篇的基本概念了解。</p></blockquote><a id="more"></a><h3 id="1-创建工程"><a href="#1-创建工程" class="headerlink" title="1. 创建工程"></a>1. 创建工程</h3><p>本案例为了方便，直接使用<code>springboot</code>快速创建一个<code>web</code>工程</p><h4 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h4><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">project</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/POM/4.0.0"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd"</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.2.5.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">modelVersion</span>&gt;</span>4.0.0<span class="tag">&lt;/<span class="name">modelVersion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>simple-mvc<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-thymeleaf<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">project</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="1-2-实现认证功能"><a href="#1-2-实现认证功能" class="headerlink" title="1.2 实现认证功能"></a>1.2 实现认证功能</h3><p>实现认证功能，我们一般需要这样几个资源</p><ul><li>认证的入口（认证页面）</li><li>认证的凭证（用户的凭证信息）</li><li>认证逻辑（如何才算认证成功）</li></ul><p><em>认证页面</em><br>也就是我们常说的登录页</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">xmlns</span>=<span class="string">"http://www.w3.org/1999/xhtml"</span> <span class="attr">xmlns:th</span>=<span class="string">"http://www.thymeleaf.org"</span></span></span><br><span class="line"><span class="tag">      <span class="attr">xmlns:sec</span>=<span class="string">"http://www.thymeleaf.org/thymeleaf-extras-springsecurity3"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Login<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">th:action</span>=<span class="string">"@&#123;/login&#125;"</span> <span class="attr">method</span>=<span class="string">"post"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> User Name : <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"text"</span> <span class="attr">name</span>=<span class="string">"username"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">label</span>&gt;</span> Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"password"</span> <span class="attr">name</span>=<span class="string">"password"</span>/&gt;</span> <span class="tag">&lt;/<span class="name">label</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">div</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"submit"</span> <span class="attr">value</span>=<span class="string">"登录"</span>/&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p><em>页面控制器</em><br>现在有了认证页面，那我如果才可以进入到认证页面呢，同时我点击登陆后，下一步该做什么呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Controller</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginController</span> </span>&#123;</span><br><span class="line">  <span class="comment">// 认证逻辑处理</span></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> AuthenticationService authenticationService;</span><br><span class="line">  </span><br><span class="line"><span class="comment">// 根路径直接跳转至认证页面</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">loginUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"/login"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 认证请求</span></span><br><span class="line">    <span class="meta">@RequestMapping</span>(<span class="string">"/login"</span>)</span><br><span class="line">    <span class="meta">@ResponseBody</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">login</span><span class="params">(HttpServletRequest request)</span> </span>&#123;</span><br><span class="line">   AuthenticationRequest authenticationRequest = <span class="keyword">new</span> AuthenticationRequest(request);</span><br><span class="line">        User user = authenticationService.authentication(authenticationRequest);</span><br><span class="line">        <span class="keyword">return</span> user.getUsername() + <span class="string">"你好！"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过客户端传递来的参数进行处理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationRequest</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">AuthenticationRequest</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">        username = request.getParameter(<span class="string">"username"</span>);</span><br><span class="line">        password = request.getParameter(<span class="string">"password"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 省略 setter getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时我们还需要一个状态用户信息的对象User</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer userId, String username, String password, <span class="keyword">boolean</span> enable)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.enable = enable;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">// 省略 setter getter</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了用户了，有了入口了，接下来就是对这些数据的处理，看是否如何认证条件了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Service</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationService</span></span>&#123;</span><br><span class="line"><span class="comment">// 模拟数据库中保存的两个用户</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; userMap = <span class="keyword">new</span> HashMap&lt;String, User&gt;() &#123;&#123;</span><br><span class="line">        put(<span class="string">"admin"</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"admin"</span>, <span class="string">"admin"</span>, <span class="keyword">true</span>));</span><br><span class="line">        put(<span class="string">"spring"</span>, <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"spring"</span>, <span class="string">"spring"</span>, <span class="keyword">false</span>));</span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> User <span class="title">loginByUserName</span><span class="params">(String userName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> userMap.get(userName);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> User <span class="title">authentication</span><span class="params">(AuthenticationRequest authenticationRequest)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (authenticationRequest == <span class="keyword">null</span></span><br><span class="line">                || StringUtils.isEmpty(authenticationRequest.getUsername())</span><br><span class="line">                || StringUtils.isEmpty(authenticationRequest.getPassword())) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"账号或密码为空"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        User user = loginByUserName(authenticationRequest.getUsername());</span><br><span class="line">        <span class="keyword">if</span> (user == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"用户不存在"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!authenticationRequest.getPassword().equals(user.getPassword()))&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"密码错误"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (!user.isEnable())&#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException(<span class="string">"该账户已被禁用"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> user;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们模拟了两个用户，一个是正常使用的账号，还有个账号因为某些特殊的原因被封禁了，我们一起来测试一下。</p><p>启动项目在客户端输入<code>localhost:8080</code> 会直接跳转到认证页面</p><p><img src="https://i.loli.net/2020/04/05/QeUvAE8Ipr3XD5W.png" alt="login1.png"></p><p>我们分别尝试不同的账户密码登录看具体显示什么信息。</p><p>1、数据的密码不正确</p><p><img src="https://i.loli.net/2020/04/05/au3GP5zgLIi42kp.png" alt="error1.png"></p><p>2、账户被禁用</p><p><img src="https://i.loli.net/2020/04/05/JheF8dISQmxjfsz.png" alt="error2.png"></p><p>3、数据正确的用户名和密码</p><p><img src="https://i.loli.net/2020/04/05/BjbwtXKDI7QN1eP.png" alt="success1.png"></p><p>此时我们的测试均已符合预期，能够将正确的信息反馈给用户。这也是最基础的认证功能，用户能够通过系统的认证，说明他是该系统的合法用户，但是用户在后续的访问过程中，我们需要知道到底是哪个用户在操作呢，这时我们就需要引入到会话的功能呢。</p><h3 id="1-3-实现会话功能"><a href="#1-3-实现会话功能" class="headerlink" title="1.3 实现会话功能"></a>1.3 实现会话功能</h3><p><a href="https://baike.baidu.com/item/会话/1657433" target="_blank" rel="noopener">会话</a>是指一个终端用户与交互系统进行通讯的过程，比如从输入账户密码进入操作系统到退出操作系统就是一个会话过程。<br>1、增加会话的控制</p><p><em>关于<code>session</code>的操作，可参考<code>HttpServletRqeust</code>的相关API</em></p><p>前面引言中我们提到了session_id的概念，与客户端的交互。<br>定义一个常量作为存放用户信息的key，同时在登录成功后保存用户信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">privata finl static String USER_SESSION_KEY &#x3D; &quot;user_session_key&quot;;</span><br><span class="line">@RequestMapping(&quot;&#x2F;login&quot;)</span><br><span class="line">@ResponseBody</span><br><span class="line">public String login(HttpServletRequest request) &#123;</span><br><span class="line">AuthenticationRequest authenticationRequest &#x3D; new AuthenticationRequest(request);</span><br><span class="line">User user &#x3D; authenticationService.authentication(authenticationRequest);</span><br><span class="line">request.getSession().setAttribute(USER_SESSION_KEY,user);</span><br><span class="line">return user.getUsername() + &quot;你好！&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、测试会话的效果</p><p>既然说用户认证后，我们将用户的信息保存在了服务端中，那我们就测试一下通过会话，服务端是否知道后续的操作是哪个用户呢？我们添加一个获取用户信息的接口<code>/getUser</code>，看是否能后查询到当前登录的用户信息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/getUser"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUser</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">  Object object = request.getSession().getAttribute(<span class="string">"user_"</span>);</span><br><span class="line">  <span class="keyword">if</span> (object != <span class="keyword">null</span>)&#123;</span><br><span class="line">    User user = (User) object;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">"当前访问用户为："</span> + user.getUsername();</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"匿名用户访问"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们通过客户端传递的信息，在服务端查询是否有用户信息，如果没有则是匿名用户的访问，如果有则返回该用户信息。</p><p>首先在不登录下直接访问<code>localhost:8080/getUser</code> 返回<code>匿名用户访问</code></p><p>登陆后再访问返回<code>当前访问用户为：admin</code></p><p>此时我们已经可以看到当认证通过后，后续的访问服务端通过会话机制将知道当前访问的用户是说，这将便于我们进一步处理对用户和资源的控制。</p><h3 id="1-4-实现授权功能"><a href="#1-4-实现授权功能" class="headerlink" title="1.4 实现授权功能"></a>1.4 实现授权功能</h3><p>既然我们知道了是谁在访问用户，接下来我们将对用户访问的资源进行控制。</p><ul><li>匿名用户针对部分接口不可访问，提示其认证后再访问</li><li>根据用户拥有的权限对资源进行操作（资源查询/资源更新）</li></ul><p>1、实现匿名用户不可访问。</p><p>前面我们已经可以通过<code>/getUser</code>的接口示例中知道是否是匿名用户，那接下来我们就对匿名用户进行拦截后跳转到认证页面。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NoAuthenticationInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_SESSION_KEY = <span class="string">"user_session_key"</span>;</span><br><span class="line">    <span class="comment">// 前置拦截，在接口访问前处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object attribute = request.getSession().getAttribute(USER_SESSION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (attribute == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="comment">// 匿名访问 跳转到根路径下的login.html</span></span><br><span class="line">            response.sendRedirect(<span class="string">"/"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>然后再将自定义的匿名用户拦截器，放入到<code>web</code>容器中使其生效</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加自定义拦截器,保护路径/protect 下的所有接口资源</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> NoAuthenticationInterceptor()).addPathPatterns(<span class="string">"/protect/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们保护<code>/protect</code> 下的所有接口资源，当匿名用户访问上述接口时，都将被系统跳转到认证页面进行认证后才可以访问。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/protect/getResource"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">protectResource</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"这是非匿名用户访问的资源"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就不尽兴测试页面的展示了。</p><p>2、根据用户拥有的权限对资源进行操作（资源查询/资源更新）</p><p>根据匿名用户处理的方式，我们此时也可设置拦截器，对接口的权限和用户的权限进行对比，通过后放行，不通过则提示。此时我们需要配置这样几个地方</p><ul><li>用户所具有的权限</li><li>一个权限对比的拦截器</li><li>一个资源接口</li></ul><p>改造用户信息，使其具有相应的权限</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer userId;</span><br><span class="line">    <span class="keyword">private</span> String username;</span><br><span class="line">    <span class="keyword">private</span> String password;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> enable;</span><br><span class="line">    <span class="comment">// 授予权限</span></span><br><span class="line">    <span class="keyword">private</span> Set&lt;String&gt; authorities;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">User</span><span class="params">(Integer userId, String username, String password, <span class="keyword">boolean</span> enable,Set&lt;String&gt; authorities)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.userId = userId;</span><br><span class="line">        <span class="keyword">this</span>.username = username;</span><br><span class="line">        <span class="keyword">this</span>.password = password;</span><br><span class="line">        <span class="keyword">this</span>.enable = enable;</span><br><span class="line">        <span class="keyword">this</span>.authorities = authorities;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新设置用户</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;String, User&gt; userMap = <span class="keyword">new</span> HashMap&lt;String, User&gt;() &#123;&#123;</span><br><span class="line">  Set&lt;String&gt; all =<span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  all.add(<span class="string">"read"</span>);</span><br><span class="line">  all.add(<span class="string">"update"</span>);</span><br><span class="line">  Set&lt;String&gt; read = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">  read.add(<span class="string">"read"</span>);</span><br><span class="line"></span><br><span class="line">  put(<span class="string">"admin"</span>, <span class="keyword">new</span> User(<span class="number">1</span>, <span class="string">"admin"</span>, <span class="string">"admin"</span>, <span class="keyword">true</span>,all));</span><br><span class="line">  put(<span class="string">"spring"</span>, <span class="keyword">new</span> User(<span class="number">2</span>, <span class="string">"spring"</span>, <span class="string">"spring"</span>, <span class="keyword">false</span>,read));</span><br><span class="line">&#125;&#125;;</span><br></pre></td></tr></table></figure><p>我们将<code>admin</code>用户设置最高权限，具有<code>read</code>和<code>update</code>操作，<code>spring</code>用户只具有<code>read</code>权限</p><p>权限拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">AuthenticationInterceptor</span> <span class="keyword">extends</span> <span class="title">HandlerInterceptorAdapter</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> String USER_SESSION_KEY = <span class="string">"user_session_key"</span>;</span><br><span class="line">    <span class="comment">// 前置拦截，在接口访问前处理</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Object attribute = request.getSession().getAttribute(USER_SESSION_KEY);</span><br><span class="line">        <span class="keyword">if</span> (attribute == <span class="keyword">null</span>) &#123;</span><br><span class="line">            writeContent(response,<span class="string">"匿名用户不可访问"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            User user = ((User) attribute);</span><br><span class="line">            String requestURI = request.getRequestURI();</span><br><span class="line">            <span class="keyword">if</span> (user.getAuthorities().contains(<span class="string">"read"</span>) &amp;&amp; requestURI.contains(<span class="string">"read"</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (user.getAuthorities().contains(<span class="string">"update"</span>) &amp;&amp; requestURI.contains(<span class="string">"update"</span>)) &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            writeContent(response,<span class="string">"权限不足"</span>);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//响应输出</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">writeContent</span><span class="params">(HttpServletResponse response, String msg)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        response.setContentType(<span class="string">"text/html;charset=utf‐8"</span>); PrintWriter writer = response.getWriter(); writer.print(msg);</span><br><span class="line">        writer.close();</span><br><span class="line">        response.resetBuffer();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在分别设置两个操作资源的接口</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/protect/update"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">protectUpdate</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"您正在更新资源信息"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@ResponseBody</span></span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/protect/read"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">protectRead</span><span class="params">(HttpServletRequest request)</span></span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="string">"您正在获取资源信息"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>启用自定义拦截器</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WebSecurityConfig</span> <span class="keyword">implements</span> <span class="title">WebMvcConfigurer</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 添加自定义拦截器</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addInterceptors</span><span class="params">(InterceptorRegistry registry)</span> </span>&#123;</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> NoAuthenticationInterceptor()).addPathPatterns(<span class="string">"/protect/**"</span>);</span><br><span class="line">        registry.addInterceptor(<span class="keyword">new</span> AuthenticationInterceptor()).addPathPatterns(<span class="string">"/protect/**"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此时我们就可以使用不同的用户进行认证后访问不同的资源来进行测试了。</p><h3 id="2、总结"><a href="#2、总结" class="headerlink" title="2、总结"></a>2、总结</h3><p>当然，这仅仅是最简单的实践，特别是权限处理这一块，很多都是采取硬编码的方式处理，旨在梳理流程相关信息。而在正式的生产环境中，我们将会采取更安全更灵活更容易扩展的方式处理，同时也会使用非常实用的安全框架进行企业级认证授权的处理，例如<code>spring security</code>，<code>shiro</code>等安全框架，在接下来的篇幅中，我们将进入到<code>sping security</code>的学习。加油。</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> oauth2 </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【认证与授权】1、基本概念</title>
      <link href="/2020/03/28/spring/security/security-cap01/"/>
      <url>/2020/03/28/spring/security/security-cap01/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在互联网中我们一致都有提到或接触到关于认证和授权概念或名字，那到底什么是认证？什么是授权？他们两又有什么联系和区别呢？本系列将记录自己近一段时间学习和实践的过程，以便加深理解过程。</p></blockquote><p>我们先来一起认识两个单词<code>authentication</code>和 <code>authorization</code>，有没有发现什么特点，我第一次接触到的时候，我一直都分不清楚这两个单词的意思（其实就是英语差）。直到后续学习的过程中经常会碰到它们，我才理解了这两个词的意思，在接下来的文章中，你也可能会经常看见它们。</p><h3 id="1-1-什么是认证"><a href="#1-1-什么是认证" class="headerlink" title="1.1 什么是认证"></a>1.1 什么是认证</h3><p>在互联网中，我们每天都会使用到各种各样的APP和网站，在使用过程中通常还会遇到需要注册登录的情况，输入你的用户名和密码才能正常使用，也就是说成为这个应用的合法身份才可以访问应用的资源，这个过程就是认证。当然认证的方式有很多，常见的账号密码登录，手机验证码登录，指纹登录，刷脸登录等等。</p><a id="more"></a><h3 id="1-2-什么是会话"><a href="#1-2-什么是会话" class="headerlink" title="1.2 什么是会话"></a>1.2 什么是会话</h3><p>当一个用于认证通过以后，为了避免用户的每次操作都进行认证，这个时候就需要保持一个用户认证状态的会话，常见的认证会话机制有很多，例如<code>session</code>认证，<code>token</code>认证等。</p><p><em>基于session的认证方式</em></p><p>用户认证成功后，在服务端生成用户相关的数据保存在当前会话<code>session</code>中，发给客户端的 <code>SesssionId</code>会存放到 <code>cookie</code> 中，这样用户客户端请求时带上 <code>SesssionId</code> 就可以验证服务器端是否存在 <code>session</code> 数 据，以此完成用户的合法校验，当用户退出系统或<code>session</code>过期销毁时,客户端的<code>SesssionId</code>也就无效了。</p><img src="https://i.loli.net/2020/03/28/7sZWaPpxLBtOd4X.png" alt="Session.jpg"  /><p><em>基于token的认证方式</em></p><p>用户认证成功后，服务端生成一个token发给客户端，客户端可以放到 cookie 或 localStorage等存储中，每次请求时带上 token，服务端收到token通过验证后即可确认用户身份。</p><p><img src="https://i.loli.net/2020/03/28/Pfp978ATHeEWJZ5.png" alt="token.jpg"></p><p>基于<code>session</code>的认证方式由<code>Servlet</code>规范定制，服务端要存储<code>session</code>信息需要占用内存资源，客户端需要支持<code>cookie</code>;</p><p>基于<code>token</code>的方式则一般不需要服务端存储<code>token</code>，并且不限制客户端的存储方式。如今移动互联网时代 更多类型的客户端需要接入系统，系统多是采用前后端分离的架构进行实现，所以基于<code>token</code>的方式更适合。</p><h3 id="1-3-什么是授权"><a href="#1-3-什么是授权" class="headerlink" title="1.3 什么是授权"></a>1.3 什么是授权</h3><p> 授权是用户认证通过根据用户的权限来控制用户访问资源的过程，拥有资源的访问权限则正常访问，没有 权限则拒绝访问。例如视频网站的VIP用户，可以查看到普通用户看不到的资源信息。</p><h3 id="1-4-授权的数据模型"><a href="#1-4-授权的数据模型" class="headerlink" title="1.4 授权的数据模型"></a>1.4 授权的数据模型</h3><p>授权过程中，我们需要知道如何对用户访问的资源进行控制，需要了解一些简单的授权数据模型。</p><p>授权可以非常简单的理解成谁（Who）对什么（What）进行怎么样（How）的操作。</p><ul><li>Who 即主体（Subject），一般指用户，也可以是应用程序</li><li>What 即资源（Resource）,例如商品信息，订单信息，页面按钮或程序中的接口等信息。</li><li>How 即权限（Permission），规定了用户或程序对资源操作的许可。例如普通用户只能查看订单，管理员可修改或删除订单，这是因为普通用户和管理员用户对订单资源的操作权限不一样。</li></ul><p>通常主体、资源、权限相关的数据模型通常会包含以下几个部分</p><ul><li>主体Subject（用户ID，账号，密码…）</li><li>资源Resource(资源ID,资源名称，访问地址…)</li><li>权限Permission(权限ID、权限标识、权限名称，对应的资源ID…)</li><li>角色Role(角色ID，角色名称…)</li></ul><p><img src="https://i.loli.net/2020/03/29/AyGrDF8bq7aJvXs.png" alt="授权模型1.jpg"></p><p>你会发现权限中包含了一个资源ID，多个权限可指向一个资源，我们是否可以直接在权限信息中把资源信息包含进来呢？当然，这也是很多企业开发中的做法，将权限和资源合并为 <em>权限(权限ID、权限标识、权限名称、资源名称、资源访问地址、…)</em></p><p><img src="https://i.loli.net/2020/03/29/cUFefZXNo3Pa8CH.png" alt="授权模型2.jpg"></p><h3 id="1-4-RBAC设计模型"><a href="#1-4-RBAC设计模型" class="headerlink" title="1.4 RBAC设计模型"></a>1.4 RBAC设计模型</h3><h4 id="1-4-1-基于角色的访问控制"><a href="#1-4-1-基于角色的访问控制" class="headerlink" title="1.4.1 基于角色的访问控制"></a>1.4.1 基于角色的访问控制</h4><p>RBAC基于角色的访问控制(Role-Based Access Control)是按角色进行授权。</p><p>例如当用户角色为总经理时，他就可以查询公司的某员工的工资情况，用伪代码的方式我们可以这样表示</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Subject.hasRole(<span class="string">"总经理角色ID"</span>))&#123;</span><br><span class="line">   <span class="comment">// 查询员工工资</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在突然来了个需求，要求公司的部门经理也可以查看员工的工资情况，怎么做呢？再加一个判断就好了嘛</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Subject.hasRole(<span class="string">"总经理角色ID"</span>) || Subject.hasRole(<span class="string">"部门经理角色ID"</span>))&#123;</span><br><span class="line"> <span class="comment">// 查询员工工资</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这时候我们发现了一个问题，当哪天修改角色的权限时，就需要修改授权相关的代码，系统可扩展性较差。</p><h4 id="1-4-2-基于资源的访问控制"><a href="#1-4-2-基于资源的访问控制" class="headerlink" title="1.4.2 基于资源的访问控制"></a>1.4.2 基于资源的访问控制</h4><p>RBAC基于资源的访问控制(Resource-Based Access Control)是按资源(或权限)进行授权。</p><p>同样是上面的需求，这时候我们的代码变成了</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(Subject.hasPermission(<span class="string">"查询员工工资的权限标识"</span>))&#123;</span><br><span class="line"><span class="comment">// 查询员工工资</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当哪天行政主管角色的用户需要查询员工的工资时，我们只需要为行政主管的角色添加一个查询员工工资的权限即可，不需要去修改授权相关的代码，系统的可扩展性增强了。</p><p>（完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> oauth2 </tag>
            
            <tag> spring security </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring 中无处不在的 Properties</title>
      <link href="/2020/01/19/spring/basic/properties-use/"/>
      <url>/2020/01/19/spring/basic/properties-use/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文转载自 <em><a href="https://javadoop.com/post/spring-properties" target="_blank" rel="noopener">https://javadoop.com/post/spring-properties</a></em></p></blockquote><p>对 Spring 里面的 Properties 不理解的开发者可能会觉得有点乱，主要是因为配置方式很多种，使用方式也很多种。</p><p>本文不是原理分析、源码分析文章，只是希望可以帮助读者更好地理解和使用 Spring Properties。</p><!-- toc --><h2 id="Properties-的使用"><a href="#Properties-的使用" class="headerlink" title="Properties 的使用"></a>Properties 的使用</h2><p>本文的读者都是使用过 Spring 的，先来看看 Properties 是怎么使用的，Spring 中常用的有以下几种使用方式：</p><a id="more"></a><h3 id="1-在-xml-配置文件中使用"><a href="#1-在-xml-配置文件中使用" class="headerlink" title="1. 在 xml 配置文件中使用"></a>1. 在 xml 配置文件中使用</h3><p>即自动替换 <code>${}</code> 里面的值。</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">"xxx"</span> <span class="attr">class</span>=<span class="string">"com.javadoop.Xxx"</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"url"</span> <span class="attr">value</span>=<span class="string">"$&#123;javadoop.jdbc.url&#125;"</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-通过-Value-注入使用"><a href="#2-通过-Value-注入使用" class="headerlink" title="2. 通过 @Value 注入使用"></a>2. 通过 @Value 注入使用</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Value</span>(<span class="string">"$&#123;javadoop.jdbc.url&#125;"</span>)</span><br><span class="line"><span class="keyword">private</span> String url;</span><br></pre></td></tr></table></figure><h3 id="3-通过-Environment-获取"><a href="#3-通过-Environment-获取" class="headerlink" title="3. 通过 Environment 获取"></a>3. 通过 Environment 获取</h3><p>此法有需要注意的地方。并不是所有的配置方式都支持通过 Environment 接口来获取属性值，亲测只有使用注解 @PropertySource 的时候可以用，否则会得到 <strong>null</strong>，至于怎么配置，下面马上就会说。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> Environment env;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getUrl</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> env.getProperty(<span class="string">"javadoop.jdbc.url"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>如果是 Spring Boot 的 application.properties 注册的，那也是可以的。</p></blockquote><h2 id="Properties-配置"><a href="#Properties-配置" class="headerlink" title="Properties 配置"></a>Properties 配置</h2><p>前面我们说了怎么使用我们配置的 Properties，那么该怎么配置呢？Spring 提供了很多种配置方式。</p><h3 id="1-通过-xml-配置"><a href="#1-通过-xml-配置" class="headerlink" title="1. 通过 xml 配置"></a>1. 通过 xml 配置</h3><p>下面这个是最常用的配置方式了，很多项目都是这么写的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">context:property-placeholder</span> <span class="attr">location</span>=<span class="string">"classpath:sys.properties"</span> /&gt;</span></span><br></pre></td></tr></table></figure><h3 id="2-通过-PropertySource-配置"><a href="#2-通过-PropertySource-配置" class="headerlink" title="2. 通过 @PropertySource 配置"></a>2. 通过 @PropertySource 配置</h3><p>前面的通过 xml 配置非常常用，但是如果你也有一种要<strong>消灭所有 xml 配置文件</strong>的冲动的话，你应该使用以下方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PropertySource</span>(<span class="string">"classpath:sys.properties"</span>)</span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JavaDoopConfig</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>注意一点，@PropertySource 在这里必须搭配 @Configuration 来使用，具体不展开说了。</p><h3 id="3-PropertyPlaceholderConfigurer"><a href="#3-PropertyPlaceholderConfigurer" class="headerlink" title="3. PropertyPlaceholderConfigurer"></a>3. PropertyPlaceholderConfigurer</h3><p>如果读者见过这个，也不必觉得奇怪，在 Spring 3.1 之前，经常就是这么使用的：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:sys.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">  <span class="comment">&lt;!-- 这里可以配置一些属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>当然，我们也可以用相应的 java configuration 的版本：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PropertyPlaceholderConfigurer <span class="title">propertiess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PropertyPlaceholderConfigurer ppc = <span class="keyword">new</span> PropertyPlaceholderConfigurer();</span><br><span class="line">    Resource[] resources = <span class="keyword">new</span> ClassPathResource[]&#123;<span class="keyword">new</span> ClassPathResource(<span class="string">"sys.properties"</span>)&#125;;</span><br><span class="line">    ppc.setLocations(resources);</span><br><span class="line">    ppc.setIgnoreUnresolvablePlaceholders(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> ppc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-PropertySourcesPlaceholderConfigurer"><a href="#4-PropertySourcesPlaceholderConfigurer" class="headerlink" title="4. PropertySourcesPlaceholderConfigurer"></a>4. PropertySourcesPlaceholderConfigurer</h3><p>到了 Spring 3.1 的时候，引入了 <strong>PropertySourcesPlaceholderConfigurer</strong>，这是一个新的类，注意看和之前的 PropertyPlaceholderConfigurer 在名字上多了一个 <strong>Sources</strong>，所属的包也不一样，它在 Spring-Context 包中。</p><p>在配置上倒是没有什么区别：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">class</span>=<span class="string">"org.springframework.context.support.PropertySourcesPlaceholderConfigurer"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"locations"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">list</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">value</span>&gt;</span>classpath:sys.properties<span class="tag">&lt;/<span class="name">value</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">list</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">property</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">"ignoreUnresolvablePlaceholders"</span> <span class="attr">value</span>=<span class="string">"true"</span>/&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里可以配置一些属性 --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也来一个 java configuration 版本吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> PropertySourcesPlaceholderConfigurer <span class="title">properties</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    PropertySourcesPlaceholderConfigurer pspc = <span class="keyword">new</span> PropertySourcesPlaceholderConfigurer();</span><br><span class="line">    Resource[] resources = <span class="keyword">new</span> ClassPathResource[]&#123;<span class="keyword">new</span> ClassPathResource(<span class="string">"sys.properties"</span>)&#125;;</span><br><span class="line">    pspc.setLocations(resources);</span><br><span class="line">    pspc.setIgnoreUnresolvablePlaceholders(<span class="keyword">true</span>);</span><br><span class="line">    <span class="keyword">return</span> pspc;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Spring-Boot-相关"><a href="#Spring-Boot-相关" class="headerlink" title="Spring Boot 相关"></a>Spring Boot 相关</h2><p>Spring Boot 真的是好东西，开箱即用的感觉实在是太好了。这里简单介绍下相关的内容。</p><p>快速生成一个 Spring Boot 项目：<a href="https://start.spring.io/" target="_blank" rel="noopener">https://start.spring.io/</a></p><h3 id="application-properties"><a href="#application-properties" class="headerlink" title="application.properties"></a>application.properties</h3><p>我们每个项目都默认有一个 application.properties 文件，这个配置文件不需要像前面说的那样进行<em>注册</em>，Spring Boot 会帮我们<strong>自动注册</strong>。</p><p>当然，也许你想换个名字也是可以的，在启动的时候指定你的文件名字就可以了：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dspring.config.location=classpath:sys.properties -jar app.jar</span><br></pre></td></tr></table></figure><h3 id="application-env-properties"><a href="#application-env-properties" class="headerlink" title="application-{env}.properties"></a>application-{env}.properties</h3><p>为了给不同的环境指定不同的配置，我们会用到这个。</p><p>比如测试环境和生产环境的数据库连接信息就不一样。</p><p>所以，在 application.properties 的基础上，我们还需要新建 application-dev.properties 和 application-prd.properties，用于配置环境相关的信息，然后启动的时候指定环境。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Dspring.profiles.active=prd -jar app.jar</span><br></pre></td></tr></table></figure><p>结果就是，application.properties 和 application-prd.properties 两个文件中的配置都会注册进去，如果有重复的 key，application-prd.properties 文件中的优先级较高。</p><h3 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>这个注解是 Spring Boot 中才有的。</p><p>即使大家不使用这个注解，大家也可能会在开源项目中看到这个，这里简单介绍下。</p><p>来一个例子直观一些。按照之前说的，在配置文件中填入下面的信息，你可以选择写入 application.properties 也可以用第一节介绍的方法。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">javadoop.database.url</span>=<span class="string">jdbc:mysql:</span></span><br><span class="line"><span class="meta">javadoop.database.username</span>=<span class="string">admin</span></span><br><span class="line"><span class="meta">javadoop.database.password</span>=<span class="string">admin123456</span></span><br></pre></td></tr></table></figure><p>java 文件：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@ConfigurationProperties</span>(prefix = <span class="string">"javadoop.database"</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataBase</span> </span>&#123;</span><br><span class="line">    String url;</span><br><span class="line">    String username;</span><br><span class="line">    String password;</span><br><span class="line">    <span class="comment">// getters and setters</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，就在 Spring 的容器中就自动注册了一个类型为 DataBase 的 bean 了，而且属性都已经 set 好了。</p><h3 id="在启动过程中动态修改属性值"><a href="#在启动过程中动态修改属性值" class="headerlink" title="在启动过程中动态修改属性值"></a>在启动过程中动态修改属性值</h3><p>这个我觉得都不需要太多介绍，用 Spring Boot 的应该基本上都知道。</p><p>属性配置有个覆盖顺序，也就是当出现相同的 key 的时候，以哪里的值为准。</p><p><strong>启动参数 &gt; application-{env}.properties &gt; application.properties</strong></p><p><strong>启动参数动态设置属性：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">java -Djavadoop.database.password=admin4321 -jar app.jar</span><br></pre></td></tr></table></figure><p>另外，还可以利用系统环境变量设置属性，还可以指定随机数等等，确实很灵活，不过没什么用，就不介绍了。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>读者如果想要更加深入地了解 Spring 的 Properties，需要去理解 Spring 的 Environment 接口相关的源码。建议感兴趣的读者去翻翻源代码看看</p><p>（全文完）</p>]]></content>
      
      
      
        <tags>
            
            <tag> spring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis学习与应用-位图</title>
      <link href="/2019/08/20/redis/redis-bitmap/"/>
      <url>/2019/08/20/redis/redis-bitmap/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是位图"><a href="#什么是位图" class="headerlink" title="什么是位图"></a>什么是位图</h2><blockquote><p>位图<code>bitmap</code>是通过一个<code>bit</code>来表示某个元素对应的值或者状态，是由一组bit位组成，每个bit位对应0和1两个状态，虽然内部还是采用string类型进行存储，但是redis提供了直接操作位图的指令，可以把他看作是一个bit数组，数组的下标就是偏移量。</p></blockquote><a id="more"></a><h2 id="常用命令介绍"><a href="#常用命令介绍" class="headerlink" title="常用命令介绍"></a>常用命令介绍</h2><h3 id="一、SETBIT-key-offset-value"><a href="#一、SETBIT-key-offset-value" class="headerlink" title="一、SETBIT key offset value"></a>一、SETBIT key offset value</h3><blockquote><p>可用版本：&gt;=2.20<br>时间复杂度：O(1)</p></blockquote><h4 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h4><p>对 <code>key</code> 所储存的字符串值，设置或清除指定偏移量上的位(bit)。<br>位的设置或清除取决于 <code>value</code> 参数，可以是 <code>0</code> 也可以是 <code>1</code> 。<br>当 <code>key</code> 不存在时，自动生成一个新的字符串值。<br>字符串会进行伸展(grown)以确保它可以将 <code>value</code> 保存在指定的偏移量上。当字符串值进行伸展时，空白位置以 <code>0</code> 填充。<br><code>offset</code> 参数必须大于或等于 <code>0</code> ，小于 2^32 (bit 映射被限制在 512 MB 之内)。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h4><p>原来储存的位</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 在key值为bitkey的偏移量0处,设置值为1</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> setbit bitkey 0 1</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回原存储的值</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在key值为bitkey的偏移量0处,设置值为1</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> setbit bitkey 0 0</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 返回原存储的值</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="二、GETBIT-key-offset"><a href="#二、GETBIT-key-offset" class="headerlink" title="二、GETBIT key offset"></a>二、GETBIT key offset</h3><blockquote><p>可用版本：&gt;=2.2.0</p><p>时间复杂度：O(1)</p></blockquote><h4 id="作用-1"><a href="#作用-1" class="headerlink" title="作用"></a>作用</h4><p>对<code>key</code> 所储存的字符串值，获取指定偏移量上的位(bit)。<br>当 <code>offset</code> 比字符串值的长度大，或者 <code>key</code> 不存在时，返回 <code>0</code> 。</p><h4 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h4><p>字符串值指定偏移量上的位</p><h4 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 不存在的key</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">getbit bitkey_0</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">reids&gt;</span><span class="bash">setbit bitkey_0 0 0</span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> 超过默认的偏移量（没有grown）</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">getbit bitkey_0 10000</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">getbit bitkey_0 0</span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="三、-BITCOUNT-key-start-end"><a href="#三、-BITCOUNT-key-start-end" class="headerlink" title="三、 BITCOUNT key [start] [end]"></a>三、 BITCOUNT key [start] [end]</h3><blockquote><p>可用版本：&gt;=2.6.0</p><p>时间复杂度：O(N)</p></blockquote><h4 id="作用-2"><a href="#作用-2" class="headerlink" title="作用"></a>作用</h4><p>计算给定字符串中，被设置为 1 的比特位的数量。<br>一般情况下，给定的整个字符串都会被进行计数，通过指定额外的 start 或 end 参数，可以让计数只在特定的位上进行。<br>start 和 end 参数的设置和 GETRANGE key start end 命令类似，都可以使用负数值： 比如 -1 表示最后一个字节， -2 表示倒数第二个字节，以此类推。<br>不存在的 key 被当成是空字符串来处理，因此对一个不存在的 key 进行 BITCOUNT 操作，结果为 0 。</p><h4 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash">setbit key_count 0 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">setbit key_count 1 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">setbit key_count 2 0</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">bitcount key_count</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h3 id="四、BITPOS-key-bit-start-end"><a href="#四、BITPOS-key-bit-start-end" class="headerlink" title="四、BITPOS key bit [start] [end]"></a>四、BITPOS key bit [start] [end]</h3><blockquote><p>可用版本：&gt;= 2.8.7<br>时间复杂度：O(N)，其中N为位图包含的二进制位数量</p></blockquote><h4 id="作用-3"><a href="#作用-3" class="headerlink" title="作用"></a>作用</h4><p>返回位图中第一个值为bit的二进制的位置<br>在默认情况下，命令将检测整个位图，但用户也可以通过start和end参数来指定要检测的范围</p><h4 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h4><p>整数返回</p><h4 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">redis&gt;</span><span class="bash">setbit key_pos 2 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">bitpos key_pos 0</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash">bitpos key_pos 1</span></span><br><span class="line">(integer) 2</span><br></pre></td></tr></table></figure><h3 id="五、BITOP-operation-destkey-key-key-…"><a href="#五、BITOP-operation-destkey-key-key-…" class="headerlink" title="五、BITOP operation destkey key [key …]"></a>五、BITOP operation destkey key [key …]</h3><blockquote><p>可用版本：&gt;=2.6.0</p><p>时间复杂度：O(N)</p></blockquote><h4 id="作用-4"><a href="#作用-4" class="headerlink" title="作用"></a>作用</h4><p>对一个或多个保存二进制位的字符串 <code>key</code> 进行位元操作，并将结果保存到 <code>destkey</code> 上。<br><code>operation</code> 可以是 <code>AND</code> 、 <code>OR</code> 、 <code>NOT</code> 、 <code>XOR</code> 这四种操作中的任意一种：</p><ul><li><code>BITOP AND destkey key [key ...]</code> ，对一个或多个 <code>key</code> 求逻辑并，并将结果保存到 <code>destkey</code> 。</li><li><code>BITOP OR destkey key [key ...]</code> ，对一个或多个 <code>key</code> 求逻辑或，并将结果保存到 <code>destkey</code> 。</li><li><code>BITOP XOR destkey key [key ...]</code> ，对一个或多个 <code>key</code> 求逻辑异或，并将结果保存到 <code>destkey</code> 。</li><li><code>BITOP NOT destkey key</code> ，对给定 <code>key</code> 求逻辑非，并将结果保存到 <code>destkey</code> 。<br>除了 <code>NOT</code> 操作之外，其他操作都可以接受一个或多个 <code>key</code> 作为输入。</li></ul><h4 id="返回值-3"><a href="#返回值-3" class="headerlink" title="返回值"></a>返回值</h4><p>保存到 <code>destkey</code> 的字符串的长度，和输入 <code>key</code> 中最长的字符串长度相等。</p><h4 id="示例-4"><a href="#示例-4" class="headerlink" title="示例"></a>示例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 先保存几组</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> key_1:1001  key_2:1011 </span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> setbit key_1 0 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> setbit key_1 3 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> setbit key_2 0 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">reids&gt;</span><span class="bash"> setbit key_2 2 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">reids&gt;</span><span class="bash"> setbit key_2 3 1</span></span><br><span class="line">(integer) 0</span><br><span class="line"><span class="meta">#</span><span class="bash"> AND key求逻辑并</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> bitop and key_and key_1 key_2 <span class="comment"># 结果将是1001</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> OR key求逻辑或</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> bitop or key_or key_1 key_2 <span class="comment"># 1011</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> XOR key求逻辑异或</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> bitop xor key_xor key_1 key_2 <span class="comment"># 0100</span></span></span><br><span class="line">(integer) 1</span><br><span class="line"><span class="meta">#</span><span class="bash"> NOT key求逻辑非</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> bitop not key_not key_1 <span class="comment"># 0110</span></span></span><br><span class="line">(integer) 1</span><br></pre></td></tr></table></figure><h3 id="六、BITFIELD-key-GET-type-offset-SET-type-offset-value-INCRBY-type-offset-increment-OVERFLOW-WRAP-SAT-FAIL"><a href="#六、BITFIELD-key-GET-type-offset-SET-type-offset-value-INCRBY-type-offset-increment-OVERFLOW-WRAP-SAT-FAIL" class="headerlink" title="六、BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]"></a>六、BITFIELD key [GET type offset] [SET type offset value] [INCRBY type offset increment] [OVERFLOW WRAP|SAT|FAIL]</h3><blockquote><p>可用版本：&gt;= 3.2.0</p><p>时间复杂度：每个子命令的复杂度为 O(1) </p></blockquote><h4 id="作用-5"><a href="#作用-5" class="headerlink" title="作用"></a>作用</h4><p>一次对多个位范围进行操作。bitfield 有三个子指令，分别是 get/set/incrby。每个指令都可以对指定片段做操作。</p><h4 id="返回值-4"><a href="#返回值-4" class="headerlink" title="返回值"></a>返回值</h4><p>返回一个数组作为回复， 数组中的每个元素就是对应操作的执行结果。</p><h4 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 从第1位开始取4位，设值为5（有符号数）</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> BITFIELD key SET i4 0 5</span></span><br><span class="line">1) (integer) 0</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从第1位开始取4位，结果为有符号数</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> BITFIELD key GET i4 0</span></span><br><span class="line">1) (integer) 5</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从第1位取4位，结果为有符号数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从第5位取4位，设值为6，结果为无符号数</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 从第5位去4位，值增加1，结果为无符号数</span></span><br><span class="line"><span class="meta">redis&gt;</span><span class="bash"> BITFIELD key GET i4 0 SET u4 4 6 INCRBY u4 4 1</span></span><br><span class="line">1) (integer) 5</span><br><span class="line">2) (integer) 0</span><br><span class="line">3) (integer) 7</span><br></pre></td></tr></table></figure><p>BITFIELD还提供了三种溢出策略：</p><ul><li><code>WRAP</code>（wrap around，回绕）。一个i8的整数，值为127，递增1会导致值变为-128；</li><li><code>SAT</code>（saturation arithmetic，饱和计算）。一个i8的整数，值为120，递增10结果变为127（i8 类型所能储存的最大整数值）；</li><li><code>FAIL</code>。  发生溢出时，操作失败。并返回空值表示计算未被执行。</li></ul><figure class="highlight rust"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">redis&gt; BITFIELD tian_key SET <span class="built_in">i8</span> <span class="number">0</span> <span class="number">127</span> OVERFLOW WRAP INCRBY <span class="built_in">i8</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) (integer) <span class="number">0</span></span><br><span class="line"><span class="number">2</span>) (integer) -<span class="number">128</span></span><br><span class="line">redis&gt; BITFIELD tian_key_2 SET <span class="built_in">i8</span> <span class="number">0</span> <span class="number">120</span> OVERFLOW SAT INCRBY <span class="built_in">i8</span> <span class="number">0</span> <span class="number">10</span></span><br><span class="line"><span class="number">1</span>) (integer) <span class="number">0</span></span><br><span class="line"><span class="number">2</span>) (integer) <span class="number">127</span></span><br><span class="line">redis&gt; BITFIELD tian_key_3 SET <span class="built_in">i8</span> <span class="number">0</span> <span class="number">127</span> OVERFLOW FAIL INCRBY <span class="built_in">i8</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span>) (integer) <span class="number">0</span></span><br><span class="line"><span class="number">2</span>) (nil)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
